
STM32L4xx_RS-485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08005a5c  08005a5c  00015a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e00  08005e00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e08  08005e08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  08005e80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08005e80  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ed5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283b  00000000  00000000  00030f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000337b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00034588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002208a  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106da  00000000  00000000  000572d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9574  00000000  00000000  000679ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130f20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  00130f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a44 	.word	0x08005a44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005a44 	.word	0x08005a44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b086      	sub	sp, #24
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e009      	b.n	80005e8 <_write+0x26>
		ITM_SendChar((*ptr++));
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffc9 	bl	8000574 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	3301      	adds	r3, #1
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dbf1      	blt.n	80005d4 <_write+0x12>
	return len;
 80005f0:	687b      	ldr	r3, [r7, #4]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3718      	adds	r7, #24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <Req_data_Modbbus>:

void Req_data_Modbbus(uint8_t *data) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2102      	movs	r1, #2
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <Req_data_Modbbus+0x34>)
 800060a:	f001 f8fd 	bl	8001808 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, data, 8, 1000);
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	2208      	movs	r2, #8
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <Req_data_Modbbus+0x38>)
 8000618:	f002 fdce 	bl	80031b8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2102      	movs	r1, #2
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <Req_data_Modbbus+0x34>)
 8000622:	f001 f8f1 	bl	8001808 <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	48000400 	.word	0x48000400
 8000634:	200000c0 	.word	0x200000c0

08000638 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000638:	b4b0      	push	{r4, r5, r7}
 800063a:	b093      	sub	sp, #76	; 0x4c
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
    uint8_t *RxDataArr[] = {RxData, RxData1, RxData2, RxData3, RxData4, RxData5, RxData6};
 8000644:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <HAL_UARTEx_RxEventCallback+0xc8>)
 8000646:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    uint8_t *DataArr[] = {Do, Temp, Sat, Ph, Ec, Sal, Orp};
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <HAL_UARTEx_RxEventCallback+0xcc>)
 800065a:	f107 040c 	add.w	r4, r7, #12
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for (int i = 0; i < 7; i++) {
 800066c:	2300      	movs	r3, #0
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
 8000670:	e03d      	b.n	80006ee <HAL_UARTEx_RxEventCallback+0xb6>
		DataArr[i][0] = RxDataArr[i][3];
 8000672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	3348      	adds	r3, #72	; 0x48
 8000678:	443b      	add	r3, r7
 800067a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800067e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	3348      	adds	r3, #72	; 0x48
 8000684:	443b      	add	r3, r7
 8000686:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800068a:	78d2      	ldrb	r2, [r2, #3]
 800068c:	701a      	strb	r2, [r3, #0]
		DataArr[i][1] = RxDataArr[i][4];
 800068e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	3348      	adds	r3, #72	; 0x48
 8000694:	443b      	add	r3, r7
 8000696:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800069a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	3348      	adds	r3, #72	; 0x48
 80006a0:	443b      	add	r3, r7
 80006a2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80006a6:	3301      	adds	r3, #1
 80006a8:	7912      	ldrb	r2, [r2, #4]
 80006aa:	701a      	strb	r2, [r3, #0]
		DataArr[i][2] = RxDataArr[i][5];
 80006ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	3348      	adds	r3, #72	; 0x48
 80006b2:	443b      	add	r3, r7
 80006b4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80006b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	3348      	adds	r3, #72	; 0x48
 80006be:	443b      	add	r3, r7
 80006c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80006c4:	3302      	adds	r3, #2
 80006c6:	7952      	ldrb	r2, [r2, #5]
 80006c8:	701a      	strb	r2, [r3, #0]
		DataArr[i][3] = RxDataArr[i][6];
 80006ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	3348      	adds	r3, #72	; 0x48
 80006d0:	443b      	add	r3, r7
 80006d2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80006d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	3348      	adds	r3, #72	; 0x48
 80006dc:	443b      	add	r3, r7
 80006de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80006e2:	3303      	adds	r3, #3
 80006e4:	7992      	ldrb	r2, [r2, #6]
 80006e6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 7; i++) {
 80006e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006ea:	3301      	adds	r3, #1
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
 80006ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006f0:	2b06      	cmp	r3, #6
 80006f2:	ddbe      	ble.n	8000672 <HAL_UARTEx_RxEventCallback+0x3a>
    }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	374c      	adds	r7, #76	; 0x4c
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bcb0      	pop	{r4, r5, r7}
 80006fe:	4770      	bx	lr
 8000700:	08005ab4 	.word	0x08005ab4
 8000704:	08005ad0 	.word	0x08005ad0

08000708 <modbus>:

void modbus(uint8_t slaveAddr, uint8_t functCode, uint8_t startAddr1, uint8_t startAddr2, uint8_t dataLen1, uint8_t dataLen2, int typeSensor){
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b0a6      	sub	sp, #152	; 0x98
 800070c:	af00      	add	r7, sp, #0
 800070e:	4604      	mov	r4, r0
 8000710:	4608      	mov	r0, r1
 8000712:	4611      	mov	r1, r2
 8000714:	461a      	mov	r2, r3
 8000716:	4623      	mov	r3, r4
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4603      	mov	r3, r0
 800071c:	71bb      	strb	r3, [r7, #6]
 800071e:	460b      	mov	r3, r1
 8000720:	717b      	strb	r3, [r7, #5]
 8000722:	4613      	mov	r3, r2
 8000724:	713b      	strb	r3, [r7, #4]
	uint8_t* RxDataArr[] = {RxData, RxData1, RxData2, RxData3, RxData4, RxData5, RxData6};
 8000726:	4b5c      	ldr	r3, [pc, #368]	; (8000898 <modbus+0x190>)
 8000728:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800072c:	461d      	mov	r5, r3
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t* dataValArr[] = {Do, Temp, Sat, Ph, Ec, Sal, Orp};
 800073a:	4b58      	ldr	r3, [pc, #352]	; (800089c <modbus+0x194>)
 800073c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000740:	461d      	mov	r5, r3
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t* dataFrameArr[] = {&slaveAddr, &functCode, &startAddr1, &startAddr2, &dataLen1, &dataLen2};
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000756:	1d7b      	adds	r3, r7, #5
 8000758:	643b      	str	r3, [r7, #64]	; 0x40
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	647b      	str	r3, [r7, #68]	; 0x44
 800075e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
 8000764:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* labels[] = {"Dissolved Oxygen", "Temperature", "Saturation", "PH", "Electrical Conductivity", "Salinity", "ORP"};
 800076a:	4b4d      	ldr	r3, [pc, #308]	; (80008a0 <modbus+0x198>)
 800076c:	f107 041c 	add.w	r4, r7, #28
 8000770:	461d      	mov	r5, r3
 8000772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000776:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (typeSensor >= 0 && typeSensor <= 6)
 800077e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0f      	blt.n	80007a6 <modbus+0x9e>
 8000786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc0b      	bgt.n	80007a6 <modbus+0x9e>
	    HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxDataArr[typeSensor], 32);
 800078e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	3398      	adds	r3, #152	; 0x98
 8000796:	443b      	add	r3, r7
 8000798:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800079c:	2220      	movs	r2, #32
 800079e:	4619      	mov	r1, r3
 80007a0:	4840      	ldr	r0, [pc, #256]	; (80008a4 <modbus+0x19c>)
 80007a2:	f003 ff50 	bl	8004646 <HAL_UARTEx_ReceiveToIdle_IT>
	for (int i = 0; i < 6; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007ac:	e012      	b.n	80007d4 <modbus+0xcc>
		TxData[i] = *dataFrameArr[i];
 80007ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	3398      	adds	r3, #152	; 0x98
 80007b6:	443b      	add	r3, r7
 80007b8:	f853 3c60 	ldr.w	r3, [r3, #-96]
 80007bc:	7819      	ldrb	r1, [r3, #0]
 80007be:	4a3a      	ldr	r2, [pc, #232]	; (80008a8 <modbus+0x1a0>)
 80007c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007c4:	4413      	add	r3, r2
 80007c6:	460a      	mov	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++)
 80007ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007ce:	3301      	adds	r3, #1
 80007d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007d8:	2b05      	cmp	r3, #5
 80007da:	dde8      	ble.n	80007ae <modbus+0xa6>
	uint16_t crc = crc16(TxData, 6);
 80007dc:	2106      	movs	r1, #6
 80007de:	4832      	ldr	r0, [pc, #200]	; (80008a8 <modbus+0x1a0>)
 80007e0:	f000 fa48 	bl	8000c74 <crc16>
 80007e4:	4603      	mov	r3, r0
 80007e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	TxData[6] = crc & 0xFF;   // CRC LOW
 80007ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <modbus+0x1a0>)
 80007f2:	719a      	strb	r2, [r3, #6]
	TxData[7] = (crc >> 8) & 0xFF;  // CRC HIGH
 80007f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <modbus+0x1a0>)
 8000800:	71da      	strb	r2, [r3, #7]
	Req_data_Modbbus(TxData);
 8000802:	4829      	ldr	r0, [pc, #164]	; (80008a8 <modbus+0x1a0>)
 8000804:	f7ff fefa 	bl	80005fc <Req_data_Modbbus>
	char str_Hex[20], *p_Hex = str_Hex;
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	if (typeSensor >= 0 && typeSensor <= 6){
 8000810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000814:	2b00      	cmp	r3, #0
 8000816:	db3b      	blt.n	8000890 <modbus+0x188>
 8000818:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800081c:	2b06      	cmp	r3, #6
 800081e:	dc37      	bgt.n	8000890 <modbus+0x188>
		for (int i = 0; i < sizeof(dataValArr[typeSensor]); i++)
 8000820:	2300      	movs	r3, #0
 8000822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000826:	e01c      	b.n	8000862 <modbus+0x15a>
			p_Hex += sprintf(p_Hex, "%02x", dataValArr[typeSensor][i]);
 8000828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	3398      	adds	r3, #152	; 0x98
 8000830:	443b      	add	r3, r7
 8000832:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8000836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	491a      	ldr	r1, [pc, #104]	; (80008ac <modbus+0x1a4>)
 8000842:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8000846:	f004 f89b 	bl	8004980 <siprintf>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000852:	4413      	add	r3, r2
 8000854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		for (int i = 0; i < sizeof(dataValArr[typeSensor]); i++)
 8000858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800085c:	3301      	adds	r3, #1
 800085e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000866:	2b03      	cmp	r3, #3
 8000868:	d9de      	bls.n	8000828 <modbus+0x120>
		sprintf(text, "%s value : %s", labels[typeSensor], str_Hex);
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <modbus+0x1a8>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	3398      	adds	r3, #152	; 0x98
 8000876:	443b      	add	r3, r7
 8000878:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <modbus+0x1ac>)
 8000882:	f004 f87d 	bl	8004980 <siprintf>
		printf(text);
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <modbus+0x1a8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f004 f850 	bl	8004930 <iprintf>
	}
}
 8000890:	bf00      	nop
 8000892:	3798      	adds	r7, #152	; 0x98
 8000894:	46bd      	mov	sp, r7
 8000896:	bdb0      	pop	{r4, r5, r7, pc}
 8000898:	08005ab4 	.word	0x08005ab4
 800089c:	08005ad0 	.word	0x08005ad0
 80008a0:	08005b04 	.word	0x08005b04
 80008a4:	200000c0 	.word	0x200000c0
 80008a8:	200001b4 	.word	0x200001b4
 80008ac:	08005aec 	.word	0x08005aec
 80008b0:	200001bc 	.word	0x200001bc
 80008b4:	08005af4 	.word	0x08005af4

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fc10 	bl	80010e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f86f 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f000 f96d 	bl	8000ba4 <MX_GPIO_Init>
  MX_RNG_Init();
 80008ca:	f000 f8cb 	bl	8000a64 <MX_RNG_Init>
  MX_RTC_Init();
 80008ce:	f000 f8dd 	bl	8000a8c <MX_RTC_Init>
  MX_USART2_UART_Init();
 80008d2:	f000 f937 	bl	8000b44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  text = malloc(512);
 80008d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008da:	f003 ff39 	bl	8004750 <malloc>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <main+0xe4>)
 80008e4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2110      	movs	r1, #16
 80008ea:	482d      	ldr	r0, [pc, #180]	; (80009a0 <main+0xe8>)
 80008ec:	f000 ff8c 	bl	8001808 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ModbusPower_GPIO_Port, ModbusPower_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	482a      	ldr	r0, [pc, #168]	; (80009a0 <main+0xe8>)
 80008f6:	f000 ff87 	bl	8001808 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	modbus(0x01, 0x03, 0x00, 0x02, 0x00, 0x01, 0); //Dissolved Oxygen
 80008fa:	2300      	movs	r3, #0
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	2301      	movs	r3, #1
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	2300      	movs	r3, #0
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2302      	movs	r3, #2
 8000908:	2200      	movs	r2, #0
 800090a:	2103      	movs	r1, #3
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fefb 	bl	8000708 <modbus>
	HAL_Delay(750);
 8000912:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000916:	f000 fc59 	bl	80011cc <HAL_Delay>
	modbus(0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 1); //Temperature
 800091a:	2301      	movs	r3, #1
 800091c:	9302      	str	r3, [sp, #8]
 800091e:	2301      	movs	r3, #1
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	2300      	movs	r3, #0
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2301      	movs	r3, #1
 8000928:	2200      	movs	r2, #0
 800092a:	2103      	movs	r1, #3
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff feeb 	bl	8000708 <modbus>
	HAL_Delay(750);
 8000932:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000936:	f000 fc49 	bl	80011cc <HAL_Delay>
	modbus(0x03, 0x03, 0x00, 0x00, 0x00, 0x02, 3); //PH
 800093a:	2303      	movs	r3, #3
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	2302      	movs	r3, #2
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	2200      	movs	r2, #0
 800094a:	2103      	movs	r1, #3
 800094c:	2003      	movs	r0, #3
 800094e:	f7ff fedb 	bl	8000708 <modbus>
	HAL_Delay(750);
 8000952:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000956:	f000 fc39 	bl	80011cc <HAL_Delay>
	modbus(0x04, 0x03, 0x00, 0x00, 0x00, 0x02, 4); //Electrical Conductivity
 800095a:	2304      	movs	r3, #4
 800095c:	9302      	str	r3, [sp, #8]
 800095e:	2302      	movs	r3, #2
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	2300      	movs	r3, #0
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	2200      	movs	r2, #0
 800096a:	2103      	movs	r1, #3
 800096c:	2004      	movs	r0, #4
 800096e:	f7ff fecb 	bl	8000708 <modbus>
	HAL_Delay(750);
 8000972:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000976:	f000 fc29 	bl	80011cc <HAL_Delay>
	modbus(0x04, 0x03, 0x00, 0x06, 0x00, 0x02, 5); //Salinity
 800097a:	2305      	movs	r3, #5
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	2302      	movs	r3, #2
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	2300      	movs	r3, #0
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2306      	movs	r3, #6
 8000988:	2200      	movs	r2, #0
 800098a:	2103      	movs	r1, #3
 800098c:	2004      	movs	r0, #4
 800098e:	f7ff febb 	bl	8000708 <modbus>
	HAL_Delay(750);
 8000992:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000996:	f000 fc19 	bl	80011cc <HAL_Delay>
	modbus(0x01, 0x03, 0x00, 0x02, 0x00, 0x01, 0); //Dissolved Oxygen
 800099a:	e7ae      	b.n	80008fa <main+0x42>
 800099c:	200001bc 	.word	0x200001bc
 80009a0:	48000400 	.word	0x48000400

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b096      	sub	sp, #88	; 0x58
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2244      	movs	r2, #68	; 0x44
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 fed4 	bl	8004760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009ca:	f000 ff53 	bl	8001874 <HAL_PWREx_ControlVoltageScaling>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009d4:	f000 f948 	bl	8000c68 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009d8:	f000 ff2e 	bl	8001838 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <SystemClock_Config+0xbc>)
 80009de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <SystemClock_Config+0xbc>)
 80009e4:	f023 0318 	bic.w	r3, r3, #24
 80009e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80009ec:	2306      	movs	r3, #6
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	2310      	movs	r3, #16
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a02:	2302      	movs	r3, #2
 8000a04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 ff7e 	bl	8001920 <HAL_RCC_OscConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a2a:	f000 f91d 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2e:	230f      	movs	r3, #15
 8000a30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a32:	2303      	movs	r3, #3
 8000a34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	2104      	movs	r1, #4
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fb7e 	bl	8002148 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a52:	f000 f909 	bl	8000c68 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3758      	adds	r7, #88	; 0x58
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_RNG_Init+0x20>)
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <MX_RNG_Init+0x24>)
 8000a6c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_RNG_Init+0x20>)
 8000a70:	f002 f876 	bl	8002b60 <HAL_RNG_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000a7a:	f000 f8f5 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000008c 	.word	0x2000008c
 8000a88:	50060800 	.word	0x50060800

08000a8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000aa6:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <MX_RTC_Init+0xb4>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aaa:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ab2:	227f      	movs	r2, #127	; 0x7f
 8000ab4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ab8:	22ff      	movs	r2, #255	; 0xff
 8000aba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad4:	4819      	ldr	r0, [pc, #100]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000ad6:	f002 f89a 	bl	8002c0e <HAL_RTC_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 f8c2 	bl	8000c68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2201      	movs	r2, #1
 8000afc:	4619      	mov	r1, r3
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000b00:	f002 f900 	bl	8002d04 <HAL_RTC_SetTime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b0a:	f000 f8ad 	bl	8000c68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b12:	2301      	movs	r3, #1
 8000b14:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2201      	movs	r2, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_RTC_Init+0xb0>)
 8000b26:	f002 f98a 	bl	8002e3e <HAL_RTC_SetDate>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b30:	f000 f89a 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000009c 	.word	0x2000009c
 8000b40:	40002800 	.word	0x40002800

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f002 fac8 	bl	800311c <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f869 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000c0 	.word	0x200000c0
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_GPIO_Init+0xbc>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TX_EN_Pin|B4_Pin|ModbusPower_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2152      	movs	r1, #82	; 0x52
 8000c06:	4817      	ldr	r0, [pc, #92]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000c08:	f000 fdfe 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f000 fdf7 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_EN_Pin B4_Pin ModbusPower_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin|B4_Pin|ModbusPower_Pin;
 8000c1a:	2352      	movs	r3, #82	; 0x52
 8000c1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_GPIO_Init+0xc0>)
 8000c32:	f000 fc7f 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c52:	f000 fc6f 	bl	8001534 <HAL_GPIO_Init>

}
 8000c56:	bf00      	nop
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000
 8000c64:	48000400 	.word	0x48000400

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <crc16>:
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length) {
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
	uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000c80:	23ff      	movs	r3, #255	; 0xff
 8000c82:	73fb      	strb	r3, [r7, #15]
	uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000c84:	23ff      	movs	r3, #255	; 0xff
 8000c86:	73bb      	strb	r3, [r7, #14]
	unsigned int i; /* will index into CRC lookup */
	while (buffer_length--) {
 8000c88:	e013      	b.n	8000cb2 <crc16+0x3e>
		i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	4053      	eors	r3, r2
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	60bb      	str	r3, [r7, #8]
		crc_lo = crc_hi ^ table_crc_hi[i];
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <crc16+0x64>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	4053      	eors	r3, r2
 8000ca6:	73bb      	strb	r3, [r7, #14]
		crc_hi = table_crc_lo[i];
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <crc16+0x68>)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	73fb      	strb	r3, [r7, #15]
	while (buffer_length--) {
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	807a      	strh	r2, [r7, #2]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1e6      	bne.n	8000c8a <crc16+0x16>
	}
	return (crc_hi << 8 | crc_lo);
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	b29b      	uxth	r3, r3
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	08005b20 	.word	0x08005b20
 8000cdc:	08005c20 	.word	0x08005c20

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b098      	sub	sp, #96	; 0x60
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2254      	movs	r2, #84	; 0x54
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fd11 	bl	8004760 <memset>
  if(hrng->Instance==RNG)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_RNG_MspInit+0x80>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d12a      	bne.n	8000d9e <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000d48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000d4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d52:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d60:	2307      	movs	r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000d6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fc0a 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 8000d82:	f7ff ff71 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_RNG_MspInit+0x84>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_RNG_MspInit+0x84>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_RNG_MspInit+0x84>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3760      	adds	r7, #96	; 0x60
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	50060800 	.word	0x50060800
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b098      	sub	sp, #96	; 0x60
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2254      	movs	r2, #84	; 0x54
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 fccd 	bl	8004760 <memset>
  if(hrtc->Instance==RTC)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <HAL_RTC_MspInit+0x68>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d11f      	bne.n	8000e10 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dda:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fbd5 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000dec:	f7ff ff3c 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_RTC_MspInit+0x6c>)
 8000df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_RTC_MspInit+0x6c>)
 8000df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fae0 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 faf9 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3760      	adds	r7, #96	; 0x60
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40002800 	.word	0x40002800
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b09e      	sub	sp, #120	; 0x78
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2254      	movs	r2, #84	; 0x54
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fc8d 	bl	8004760 <memset>
  if(huart->Instance==USART2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <HAL_UART_MspInit+0xb8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13e      	bne.n	8000ece <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fb97 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e68:	f7ff fefe 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_UART_MspInit+0xbc>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <HAL_UART_MspInit+0xbc>)
 8000e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e76:	6593      	str	r3, [r2, #88]	; 0x58
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_UART_MspInit+0xbc>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_UART_MspInit+0xbc>)
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <HAL_UART_MspInit+0xbc>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_UART_MspInit+0xbc>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eac:	2307      	movs	r3, #7
 8000eae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f000 fb3b 	bl	8001534 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2026      	movs	r0, #38	; 0x26
 8000ec4:	f000 fa81 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec8:	2026      	movs	r0, #38	; 0x26
 8000eca:	f000 fa9a 	bl	8001402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3778      	adds	r7, #120	; 0x78
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40021000 	.word	0x40021000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f92e 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <RTC_WKUP_IRQHandler+0x10>)
 8000f3a:	f002 f8bf 	bl	80030bc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f002 f9c7 	bl	80032e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000c0 	.word	0x200000c0

08000f5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e00a      	b.n	8000f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f6e:	f3af 8000 	nop.w
 8000f72:	4601      	mov	r1, r0
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	b2ca      	uxtb	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbf0      	blt.n	8000f6e <_read+0x12>
	}

return len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_isatty>:

int _isatty(int file)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001030:	f003 fb64 	bl	80046fc <__errno>
 8001034:	4603      	mov	r3, r0
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e009      	b.n	8001054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <_sbrk+0x64>)
 8001050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20010000 	.word	0x20010000
 8001060:	00000400 	.word	0x00000400
 8001064:	200001c0 	.word	0x200001c0
 8001068:	200001d8 	.word	0x200001d8

0800106c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001094:	f7ff ffea 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010be:	f003 fb23 	bl	8004708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c2:	f7ff fbf9 	bl	80008b8 <main>

080010c6 <LoopForever>:

LoopForever:
    b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010d4:	08005e10 	.word	0x08005e10
  ldr r2, =_sbss
 80010d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010dc:	200001d8 	.word	0x200001d8

080010e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_IRQHandler>

080010e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f961 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 f80e 	bl	8001114 <HAL_InitTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	e001      	b.n	8001108 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001104:	f7ff fdec 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_InitTick+0x6c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d023      	beq.n	8001170 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_InitTick+0x70>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_InitTick+0x6c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f96d 	bl	800141e <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10f      	bne.n	800116a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d809      	bhi.n	8001164 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f937 	bl	80013ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_InitTick+0x74>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e007      	b.n	8001174 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e004      	b.n	8001174 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	20000000 	.word	0x20000000
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	200001c4 	.word	0x200001c4

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200001c4 	.word	0x200001c4

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <__NVIC_SetPriorityGrouping>:
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	; (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff29 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff3e 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff8e 	bl	8001308 <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff31 	bl	8001278 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d008      	beq.n	8001460 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2204      	movs	r2, #4
 8001452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e022      	b.n	80014a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 020e 	bic.w	r2, r2, #14
 800146e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	f003 021c 	and.w	r2, r3, #28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f202 	lsl.w	r2, r1, r2
 8001492:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d005      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2204      	movs	r2, #4
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e029      	b.n	800152a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 020e 	bic.w	r2, r2, #14
 80014e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f003 021c 	and.w	r2, r3, #28
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f202 	lsl.w	r2, r1, r2
 8001508:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
    }
  }
  return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e148      	b.n	80017d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 813a 	beq.w	80017d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d005      	beq.n	8001574 <HAL_GPIO_Init+0x40>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 0201 	and.w	r2, r3, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d017      	beq.n	8001612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d123      	bne.n	8001666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	6939      	ldr	r1, [r7, #16]
 8001662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0203 	and.w	r2, r3, #3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8094 	beq.w	80017d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6613      	str	r3, [r2, #96]	; 0x60
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c0:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1d4>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a43      	ldr	r2, [pc, #268]	; (80017fc <HAL_GPIO_Init+0x2c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1d0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_GPIO_Init+0x2cc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1cc>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001700:	2307      	movs	r3, #7
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174c:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001752:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001776:	4a23      	ldr	r2, [pc, #140]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f aeaf 	bne.w	8001544 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000

08001858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <HAL_PWREx_GetVoltageRange+0x18>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001882:	d130      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800188c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001890:	d038      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2232      	movs	r2, #50	; 0x32
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b8:	e002      	b.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018cc:	d102      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f2      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e0:	d110      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e00f      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f2:	d007      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000
 8001918:	20000000 	.word	0x20000000
 800191c:	431bde83 	.word	0x431bde83

08001920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	f000 bc02 	b.w	8002138 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001934:	4b96      	ldr	r3, [pc, #600]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193e:	4b94      	ldr	r3, [pc, #592]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80e4 	beq.w	8001b1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_RCC_OscConfig+0x4c>
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	f040 808b 	bne.w	8001a7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	f040 8087 	bne.w	8001a7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x64>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e3d9      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <HAL_RCC_OscConfig+0x7e>
 8001994:	4b7e      	ldr	r3, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199c:	e005      	b.n	80019aa <HAL_RCC_OscConfig+0x8a>
 800199e:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d223      	bcs.n	80019f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fd8c 	bl	80024d0 <RCC_SetFlashLatencyFromMSIRange>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e3ba      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	496d      	ldr	r1, [pc, #436]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e0:	4b6b      	ldr	r3, [pc, #428]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	4968      	ldr	r1, [pc, #416]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e025      	b.n	8001a42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f6:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4960      	ldr	r1, [pc, #384]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a14:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	495b      	ldr	r1, [pc, #364]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fd4c 	bl	80024d0 <RCC_SetFlashLatencyFromMSIRange>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e37a      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a42:	f000 fc81 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	4950      	ldr	r1, [pc, #320]	; (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_RCC_OscConfig+0x278>)
 8001a60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fb54 	bl	8001114 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d052      	beq.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	e35e      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d032      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a82:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb91 	bl	80011b4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a96:	f7ff fb8d 	bl	80011b4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e347      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a35      	ldr	r2, [pc, #212]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4930      	ldr	r1, [pc, #192]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	492b      	ldr	r1, [pc, #172]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
 8001ae6:	e01a      	b.n	8001b1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae8:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fb5e 	bl	80011b4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afc:	f7ff fb5a 	bl	80011b4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e314      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1dc>
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d073      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_OscConfig+0x21c>
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d10e      	bne.n	8001b54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d10b      	bne.n	8001b54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d063      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d15f      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e2f1      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5c:	d106      	bne.n	8001b6c <HAL_RCC_OscConfig+0x24c>
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e025      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d114      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x280>
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a02      	ldr	r2, [pc, #8]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	08005d20 	.word	0x08005d20
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9f      	ldr	r2, [pc, #636]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b9d      	ldr	r3, [pc, #628]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a9c      	ldr	r2, [pc, #624]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff faf8 	bl	80011b4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff faf4 	bl	80011b4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e2ae      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2a8>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fae4 	bl	80011b4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fae0 	bl	80011b4 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e29a      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d0>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d060      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x310>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x328>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e277      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4973      	ldr	r1, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	e040      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff fa9f 	bl	80011b4 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fa9b 	bl	80011b4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e255      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	495f      	ldr	r1, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fa7b 	bl	80011b4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fa77 	bl	80011b4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e231      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fa56 	bl	80011b4 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fa52 	bl	80011b4 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e20c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ef      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3ec>
 8001d2c:	e01b      	b.n	8001d66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fa39 	bl	80011b4 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fa35 	bl	80011b4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1ef      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ef      	bne.n	8001d46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a6 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f9fc 	bl	80011b4 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff f9f8 	bl	80011b4 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1b2      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d8>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df6:	e029      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_OscConfig+0x50c>
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	4b9a      	ldr	r3, [pc, #616]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a99      	ldr	r2, [pc, #612]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3c:	4b96      	ldr	r3, [pc, #600]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a95      	ldr	r2, [pc, #596]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d016      	beq.n	8001e82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f9ae 	bl	80011b4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f9aa 	bl	80011b4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e162      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ed      	beq.n	8001e5c <HAL_RCC_OscConfig+0x53c>
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff f997 	bl	80011b4 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff f993 	bl	80011b4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e14b      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b7d      	ldr	r3, [pc, #500]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a77      	ldr	r2, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed4:	4b70      	ldr	r3, [pc, #448]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eda:	4a6f      	ldr	r2, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff f966 	bl	80011b4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eec:	f7ff f962 	bl	80011b4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e11c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efe:	4b66      	ldr	r3, [pc, #408]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x5cc>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f0e:	4b62      	ldr	r3, [pc, #392]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f14:	4a60      	ldr	r2, [pc, #384]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f949 	bl	80011b4 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f26:	f7ff f945 	bl	80011b4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0ff      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80f3 	beq.w	8002136 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	f040 80c9 	bne.w	80020ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d123      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d113      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	3b01      	subs	r3, #1
 8001fae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d06b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d062      	beq.n	8002094 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0ac      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fea:	f7ff f8e3 	bl	80011b4 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f8df 	bl	80011b4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e099      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x77c>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002020:	3a01      	subs	r2, #1
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800202a:	0212      	lsls	r2, r2, #8
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	3a01      	subs	r2, #1
 8002036:	0552      	lsls	r2, r2, #21
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800203e:	0852      	lsrs	r2, r2, #1
 8002040:	3a01      	subs	r2, #1
 8002042:	0652      	lsls	r2, r2, #25
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800204a:	06d2      	lsls	r2, r2, #27
 800204c:	430a      	orrs	r2, r1
 800204e:	4912      	ldr	r1, [pc, #72]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002050:	4313      	orrs	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a0c      	ldr	r2, [pc, #48]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800206a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800206c:	f7ff f8a2 	bl	80011b4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f89e 	bl	80011b4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e058      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCC_OscConfig+0x778>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002092:	e050      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e04f      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
 8002098:	40021000 	.word	0x40021000
 800209c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d144      	bne.n	8002136 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ac:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a20      	ldr	r2, [pc, #128]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c4:	f7ff f876 	bl	80011b4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f872 	bl	80011b4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e02c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x7ac>
 80020ea:	e024      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d01f      	beq.n	8002132 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f859 	bl	80011b4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff f855 	bl	80011b4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e00f      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4905      	ldr	r1, [pc, #20]	; (8002140 <HAL_RCC_OscConfig+0x820>)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x824>)
 800212c:	4013      	ands	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
 8002130:	e001      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	feeefffc 	.word	0xfeeefffc

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0e7      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b75      	ldr	r3, [pc, #468]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4970      	ldr	r1, [pc, #448]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cf      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d908      	bls.n	80021ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4960      	ldr	r1, [pc, #384]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04c      	beq.n	8002260 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0a6      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e09a      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fe:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e08e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220e:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e086      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4943      	ldr	r1, [pc, #268]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7fe ffc0 	bl	80011b4 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7fe ffbc 	bl	80011b4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e06e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d010      	beq.n	800228e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002278:	429a      	cmp	r2, r3
 800227a:	d208      	bcs.n	800228e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	492b      	ldr	r1, [pc, #172]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d210      	bcs.n	80022be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 0207 	bic.w	r2, r3, #7
 80022a4:	4923      	ldr	r1, [pc, #140]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e036      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4918      	ldr	r1, [pc, #96]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4910      	ldr	r1, [pc, #64]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022fc:	f000 f824 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	490b      	ldr	r1, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x1f4>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1f8>)
 800231a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_ClockConfig+0x1fc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fef7 	bl	8001114 <HAL_InitTick>
 8002326:	4603      	mov	r3, r0
 8002328:	72fb      	strb	r3, [r7, #11]

  return status;
 800232a:	7afb      	ldrb	r3, [r7, #11]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	08005d20 	.word	0x08005d20
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x34>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d121      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d11e      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e005      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e004      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d134      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0xa6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0xac>
 80023ec:	e005      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023f0:	617b      	str	r3, [r7, #20]
      break;
 80023f2:	e005      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023f6:	617b      	str	r3, [r7, #20]
      break;
 80023f8:	e002      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	617b      	str	r3, [r7, #20]
      break;
 80023fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	0e5b      	lsrs	r3, r3, #25
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	3301      	adds	r3, #1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002440:	69bb      	ldr	r3, [r7, #24]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	08005d38 	.word	0x08005d38
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCC_GetHCLKFreq+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000000 	.word	0x20000000

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800247c:	f7ff fff0 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	08005d30 	.word	0x08005d30

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a8:	f7ff ffda 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0adb      	lsrs	r3, r3, #11
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	08005d30 	.word	0x08005d30

080024d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024e8:	f7ff f9b6 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 80024ec:	6178      	str	r0, [r7, #20]
 80024ee:	e014      	b.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	4a24      	ldr	r2, [pc, #144]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fa:	6593      	str	r3, [r2, #88]	; 0x58
 80024fc:	4b22      	ldr	r3, [pc, #136]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002508:	f7ff f9a6 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 800250c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002518:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002520:	d10b      	bne.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b80      	cmp	r3, #128	; 0x80
 8002526:	d919      	bls.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2ba0      	cmp	r3, #160	; 0xa0
 800252c:	d902      	bls.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800252e:	2302      	movs	r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	e013      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002534:	2301      	movs	r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	e010      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d902      	bls.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002540:	2303      	movs	r3, #3
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	e00a      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b80      	cmp	r3, #128	; 0x80
 800254a:	d102      	bne.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254c:	2302      	movs	r3, #2
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e004      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b70      	cmp	r3, #112	; 0x70
 8002556:	d101      	bne.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002558:	2301      	movs	r3, #1
 800255a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 0207 	bic.w	r2, r3, #7
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	40022000 	.word	0x40022000

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002598:	2300      	movs	r3, #0
 800259a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800259c:	2300      	movs	r3, #0
 800259e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d031      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025b4:	d01a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025ba:	d814      	bhi.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c4:	d10f      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a5c      	ldr	r2, [pc, #368]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d2:	e00c      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f9ce 	bl	800297c <RCCEx_PLLSAI1_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e4:	e003      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ea:	e000      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f4:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002602:	494e      	ldr	r1, [pc, #312]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800260a:	e001      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 809e 	beq.w	800275a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002622:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4a3f      	ldr	r2, [pc, #252]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	; 0x58
 8002644:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002650:	2301      	movs	r3, #1
 8002652:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002654:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a39      	ldr	r2, [pc, #228]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002660:	f7fe fda8 	bl	80011b4 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002666:	e009      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fda4 	bl	80011b4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	74fb      	strb	r3, [r7, #19]
        break;
 800267a:	e005      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ef      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d15a      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002698:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01e      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d019      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d6:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d016      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fd64 	bl	80011b4 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	e00b      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fd60 	bl	80011b4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d902      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	74fb      	strb	r3, [r7, #19]
            break;
 8002706:	e006      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ec      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272a:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002732:	e009      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
 8002738:	e006      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a89      	ldr	r2, [pc, #548]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002766:	4b84      	ldr	r3, [pc, #528]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 0203 	bic.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4980      	ldr	r1, [pc, #512]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002788:	4b7b      	ldr	r3, [pc, #492]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f023 020c 	bic.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	4978      	ldr	r1, [pc, #480]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	496f      	ldr	r1, [pc, #444]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	4967      	ldr	r1, [pc, #412]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027ee:	4b62      	ldr	r3, [pc, #392]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	495e      	ldr	r1, [pc, #376]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	4956      	ldr	r1, [pc, #344]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002832:	4b51      	ldr	r3, [pc, #324]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	494d      	ldr	r1, [pc, #308]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d028      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002854:	4b48      	ldr	r3, [pc, #288]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4945      	ldr	r1, [pc, #276]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002872:	d106      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b40      	ldr	r3, [pc, #256]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a3f      	ldr	r2, [pc, #252]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
 8002880:	e011      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800288a:	d10c      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f872 	bl	800297c <RCCEx_PLLSAI1_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d028      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	492d      	ldr	r1, [pc, #180]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4a28      	ldr	r2, [pc, #160]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028dc:	60d3      	str	r3, [r2, #12]
 80028de:	e011      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2101      	movs	r1, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f843 	bl	800297c <RCCEx_PLLSAI1_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01c      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291e:	4916      	ldr	r1, [pc, #88]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292e:	d10c      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f820 	bl	800297c <RCCEx_PLLSAI1_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	4904      	ldr	r1, [pc, #16]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800296c:	7cbb      	ldrb	r3, [r7, #18]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800298a:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002996:	4b71      	ldr	r3, [pc, #452]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d10d      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
       ||
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ae:	4b6b      	ldr	r3, [pc, #428]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
       ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d047      	beq.n	8002a52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e044      	b.n	8002a52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d018      	beq.n	8002a02 <RCCEx_PLLSAI1_Config+0x86>
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d825      	bhi.n	8002a20 <RCCEx_PLLSAI1_Config+0xa4>
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d002      	beq.n	80029de <RCCEx_PLLSAI1_Config+0x62>
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d009      	beq.n	80029f0 <RCCEx_PLLSAI1_Config+0x74>
 80029dc:	e020      	b.n	8002a20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029de:	4b5f      	ldr	r3, [pc, #380]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d11d      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ee:	e01a      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f0:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d116      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a00:	e013      	b.n	8002a2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a1e:	e006      	b.n	8002a2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e004      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a26:	bf00      	nop
 8002a28:	e002      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a36:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	4943      	ldr	r1, [pc, #268]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d17c      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a58:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3f      	ldr	r2, [pc, #252]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a64:	f7fe fba6 	bl	80011b4 <HAL_GetTick>
 8002a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a6a:	e009      	b.n	8002a80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a6c:	f7fe fba2 	bl	80011b4 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d902      	bls.n	8002a80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a7e:	e005      	b.n	8002a8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ef      	bne.n	8002a6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d15f      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d110      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6892      	ldr	r2, [r2, #8]
 8002aa8:	0211      	lsls	r1, r2, #8
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68d2      	ldr	r2, [r2, #12]
 8002aae:	06d2      	lsls	r2, r2, #27
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	492a      	ldr	r1, [pc, #168]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	610b      	str	r3, [r1, #16]
 8002ab8:	e027      	b.n	8002b0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d112      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ac8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6892      	ldr	r2, [r2, #8]
 8002ad0:	0211      	lsls	r1, r2, #8
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6912      	ldr	r2, [r2, #16]
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0552      	lsls	r2, r2, #21
 8002adc:	430a      	orrs	r2, r1
 8002ade:	491f      	ldr	r1, [pc, #124]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	610b      	str	r3, [r1, #16]
 8002ae4:	e011      	b.n	8002b0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002aee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6892      	ldr	r2, [r2, #8]
 8002af6:	0211      	lsls	r1, r2, #8
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6952      	ldr	r2, [r2, #20]
 8002afc:	0852      	lsrs	r2, r2, #1
 8002afe:	3a01      	subs	r2, #1
 8002b00:	0652      	lsls	r2, r2, #25
 8002b02:	430a      	orrs	r2, r1
 8002b04:	4915      	ldr	r1, [pc, #84]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7fe fb4d 	bl	80011b4 <HAL_GetTick>
 8002b1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b1c:	e009      	b.n	8002b32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b1e:	f7fe fb49 	bl	80011b4 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d902      	bls.n	8002b32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b30:	e005      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ef      	beq.n	8002b1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4903      	ldr	r1, [pc, #12]	; (8002b5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e049      	b.n	8002c06 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	795b      	ldrb	r3, [r3, #5]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f8d0 	bl	8000d28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0204 	orr.w	r2, r2, #4
 8002b9c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	d104      	bne.n	8002bb6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e027      	b.n	8002c06 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb6:	f7fe fafd 	bl	80011b4 <HAL_GetTick>
 8002bba:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002bbc:	e015      	b.n	8002bea <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002bbe:	f7fe faf9 	bl	80011b4 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d90e      	bls.n	8002bea <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d107      	bne.n	8002bea <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00d      	b.n	8002c06 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d0e2      	beq.n	8002bbe <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d06c      	beq.n	8002cfa <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fe f8bb 	bl	8000db0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	22ca      	movs	r2, #202	; 0xca
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2253      	movs	r2, #83	; 0x53
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f9a0 	bl	8002f98 <RTC_EnterInitMode>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d14b      	bne.n	8002cfa <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c74:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6899      	ldr	r1, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68d2      	ldr	r2, [r2, #12]
 8002c9c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6919      	ldr	r1, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9a4 	bl	8003000 <RTC_ExitInitMode>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11b      	bne.n	8002cfa <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0203 	bic.w	r2, r2, #3
 8002cd0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_RTC_SetTime+0x1a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e08b      	b.n	8002e36 <HAL_RTC_SetTime+0x132>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	22ca      	movs	r2, #202	; 0xca
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2253      	movs	r2, #83	; 0x53
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f92a 	bl	8002f98 <RTC_EnterInitMode>
 8002d44:	4603      	mov	r3, r0
 8002d46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d163      	bne.n	8002e16 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d126      	bne.n	8002da2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f985 	bl	800307c <RTC_ByteToBcd2>
 8002d72:	4603      	mov	r3, r0
 8002d74:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	785b      	ldrb	r3, [r3, #1]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 f97e 	bl	800307c <RTC_ByteToBcd2>
 8002d80:	4603      	mov	r3, r0
 8002d82:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d84:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	789b      	ldrb	r3, [r3, #2]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f976 	bl	800307c <RTC_ByteToBcd2>
 8002d90:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d92:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	78db      	ldrb	r3, [r3, #3]
 8002d9a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e018      	b.n	8002dd4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dc2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dc8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	78db      	ldrb	r3, [r3, #3]
 8002dce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002dde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002de2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002df2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f8f7 	bl	8003000 <RTC_ExitInitMode>
 8002e12:	4603      	mov	r3, r0
 8002e14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	22ff      	movs	r2, #255	; 0xff
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}

08002e3e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e3e:	b590      	push	{r4, r7, lr}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_RTC_SetDate+0x1a>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e075      	b.n	8002f44 <HAL_RTC_SetDate+0x106>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10e      	bne.n	8002e8c <HAL_RTC_SetDate+0x4e>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	f023 0310 	bic.w	r3, r3, #16
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	330a      	adds	r3, #10
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11c      	bne.n	8002ecc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f8f0 	bl	800307c <RTC_ByteToBcd2>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f8e9 	bl	800307c <RTC_ByteToBcd2>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002eae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f8e1 	bl	800307c <RTC_ByteToBcd2>
 8002eba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ebc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e00e      	b.n	8002eea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	78db      	ldrb	r3, [r3, #3]
 8002ed0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ed8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ede:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	22ca      	movs	r2, #202	; 0xca
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2253      	movs	r2, #83	; 0x53
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f84c 	bl	8002f98 <RTC_EnterInitMode>
 8002f00:	4603      	mov	r3, r0
 8002f02:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f870 	bl	8003000 <RTC_ExitInitMode>
 8002f20:	4603      	mov	r3, r0
 8002f22:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	22ff      	movs	r2, #255	; 0xff
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd90      	pop	{r4, r7, pc}

08002f4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f62:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002f64:	f7fe f926 	bl	80011b4 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f6a:	e009      	b.n	8002f80 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f6c:	f7fe f922 	bl	80011b4 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f7a:	d901      	bls.n	8002f80 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e007      	b.n	8002f90 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0ee      	beq.n	8002f6c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d120      	bne.n	8002ff4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002fbc:	f7fe f8fa 	bl	80011b4 <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fc2:	e00d      	b.n	8002fe0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002fc4:	f7fe f8f6 	bl	80011b4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd2:	d905      	bls.n	8002fe0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <RTC_EnterInitMode+0x5c>
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d1e7      	bne.n	8002fc4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <RTC_ExitInitMode+0x78>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <RTC_ExitInitMode+0x78>)
 8003012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003016:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <RTC_ExitInitMode+0x78>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10c      	bne.n	800303e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff91 	bl	8002f4c <HAL_RTC_WaitForSynchro>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01e      	beq.n	800306e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2203      	movs	r2, #3
 8003034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e017      	b.n	800306e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <RTC_ExitInitMode+0x78>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <RTC_ExitInitMode+0x78>)
 8003044:	f023 0320 	bic.w	r3, r3, #32
 8003048:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff7e 	bl	8002f4c <HAL_RTC_WaitForSynchro>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <RTC_ExitInitMode+0x78>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <RTC_ExitInitMode+0x78>)
 8003068:	f043 0320 	orr.w	r3, r3, #32
 800306c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40002800 	.word	0x40002800

0800307c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800308e:	e005      	b.n	800309c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3301      	adds	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	3b0a      	subs	r3, #10
 800309a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	2b09      	cmp	r3, #9
 80030a0:	d8f6      	bhi.n	8003090 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	b2db      	uxtb	r3, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80030c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030ca:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80030ea:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f80b 	bl	8003108 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40010400 	.word	0x40010400

08003108 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e040      	b.n	80031b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fe6e 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fbc0 	bl	80038e0 <UART_SetConfig>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e022      	b.n	80031b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fde0 	bl	8003d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fe67 	bl	8003e7c <UART_CheckIdleState>
 80031ae:	4603      	mov	r3, r0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	f040 8082 	bne.w	80032d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_UART_Transmit+0x26>
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07a      	b.n	80032d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_UART_Transmit+0x38>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e073      	b.n	80032d8 <HAL_UART_Transmit+0x120>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2221      	movs	r2, #33	; 0x21
 8003204:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003206:	f7fd ffd5 	bl	80011b4 <HAL_GetTick>
 800320a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d108      	bne.n	8003238 <HAL_UART_Transmit+0x80>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e003      	b.n	8003240 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003248:	e02d      	b.n	80032a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fe5a 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e039      	b.n	80032d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003276:	b292      	uxth	r2, r2
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3302      	adds	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e008      	b.n	8003294 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b292      	uxth	r2, r2
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1cb      	bne.n	800324a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	2140      	movs	r1, #64	; 0x40
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fe26 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e005      	b.n	80032d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0ba      	sub	sp, #232	; 0xe8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003306:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800330a:	f640 030f 	movw	r3, #2063	; 0x80f
 800330e:	4013      	ands	r3, r2
 8003310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d115      	bne.n	8003348 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800331c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00f      	beq.n	8003348 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 82a6 	beq.w	800388a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
      }
      return;
 8003346:	e2a0      	b.n	800388a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8117 	beq.w	8003580 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800335e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003362:	4b85      	ldr	r3, [pc, #532]	; (8003578 <HAL_UART_IRQHandler+0x298>)
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 810a 	beq.w	8003580 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800336c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d011      	beq.n	800339c <HAL_UART_IRQHandler+0xbc>
 8003378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800339c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d011      	beq.n	80033cc <HAL_UART_IRQHandler+0xec>
 80033a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2202      	movs	r2, #2
 80033ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033c2:	f043 0204 	orr.w	r2, r3, #4
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d011      	beq.n	80033fc <HAL_UART_IRQHandler+0x11c>
 80033d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2204      	movs	r2, #4
 80033ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003418:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2208      	movs	r2, #8
 8003426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	f043 0208 	orr.w	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003440:	2b00      	cmp	r3, #0
 8003442:	d012      	beq.n	800346a <HAL_UART_IRQHandler+0x18a>
 8003444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 820c 	beq.w	800388e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00d      	beq.n	800349e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d005      	beq.n	80034c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d04f      	beq.n	8003562 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 feb2 	bl	800422c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d141      	bne.n	800355a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3308      	adds	r3, #8
 80034fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003502:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800350e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800351a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1d9      	bne.n	80034d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	2b00      	cmp	r3, #0
 8003528:	d013      	beq.n	8003552 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a13      	ldr	r2, [pc, #76]	; (800357c <HAL_UART_IRQHandler+0x29c>)
 8003530:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd ffbb 	bl	80014b2 <HAL_DMA_Abort_IT>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d017      	beq.n	8003572 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800354c:	4610      	mov	r0, r2
 800354e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	e00f      	b.n	8003572 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f9ba 	bl	80038cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003558:	e00b      	b.n	8003572 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9b6 	bl	80038cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	e007      	b.n	8003572 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9b2 	bl	80038cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003570:	e18d      	b.n	800388e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003572:	bf00      	nop
    return;
 8003574:	e18b      	b.n	800388e <HAL_UART_IRQHandler+0x5ae>
 8003576:	bf00      	nop
 8003578:	04000120 	.word	0x04000120
 800357c:	080042f3 	.word	0x080042f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003584:	2b01      	cmp	r3, #1
 8003586:	f040 8146 	bne.w	8003816 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 813f 	beq.w	8003816 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8138 	beq.w	8003816 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2210      	movs	r2, #16
 80035ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	f040 80b4 	bne.w	8003726 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 815f 	beq.w	8003892 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035de:	429a      	cmp	r2, r3
 80035e0:	f080 8157 	bcs.w	8003892 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 8085 	bne.w	800370a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800362a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800362e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003636:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1da      	bne.n	8003600 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800365a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800366e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003672:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e1      	bne.n	800364a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3308      	adds	r3, #8
 800368c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e3      	bne.n	8003686 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	f023 0310 	bic.w	r3, r3, #16
 80036de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e4      	bne.n	80036ca <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fe96 	bl	8001436 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003716:	b29b      	uxth	r3, r3
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	b29b      	uxth	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fc ff8a 	bl	8000638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003724:	e0b5      	b.n	8003892 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003732:	b29b      	uxth	r3, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 80a7 	beq.w	8003896 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a2 	beq.w	8003896 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003774:	647b      	str	r3, [r7, #68]	; 0x44
 8003776:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800377a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e4      	bne.n	8003752 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3308      	adds	r3, #8
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	623b      	str	r3, [r7, #32]
   return(result);
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3308      	adds	r3, #8
 80037a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037ac:	633a      	str	r2, [r7, #48]	; 0x30
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e3      	bne.n	8003788 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	60fb      	str	r3, [r7, #12]
   return(result);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0310 	bic.w	r3, r3, #16
 80037e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	69b9      	ldr	r1, [r7, #24]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	617b      	str	r3, [r7, #20]
   return(result);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e4      	bne.n	80037d2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fc ff12 	bl	8000638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003814:	e03f      	b.n	8003896 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <HAL_UART_IRQHandler+0x560>
 8003822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003836:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fefa 	bl	8004632 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800383e:	e02d      	b.n	800389c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800384c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01c      	beq.n	800389a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
    }
    return;
 8003868:	e017      	b.n	800389a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <HAL_UART_IRQHandler+0x5bc>
 8003876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fd4b 	bl	800431e <UART_EndTransmit_IT>
    return;
 8003888:	e008      	b.n	800389c <HAL_UART_IRQHandler+0x5bc>
      return;
 800388a:	bf00      	nop
 800388c:	e006      	b.n	800389c <HAL_UART_IRQHandler+0x5bc>
    return;
 800388e:	bf00      	nop
 8003890:	e004      	b.n	800389c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <HAL_UART_IRQHandler+0x5bc>
    return;
 800389a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800389c:	37e8      	adds	r7, #232	; 0xe8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop

080038a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e4:	b08a      	sub	sp, #40	; 0x28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	4313      	orrs	r3, r2
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4bb4      	ldr	r3, [pc, #720]	; (8003be0 <UART_SetConfig+0x300>)
 8003910:	4013      	ands	r3, r2
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003918:	430b      	orrs	r3, r1
 800391a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4aa9      	ldr	r2, [pc, #676]	; (8003be4 <UART_SetConfig+0x304>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	4313      	orrs	r3, r2
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	430a      	orrs	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4aa0      	ldr	r2, [pc, #640]	; (8003be8 <UART_SetConfig+0x308>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d126      	bne.n	80039b8 <UART_SetConfig+0xd8>
 800396a:	4ba0      	ldr	r3, [pc, #640]	; (8003bec <UART_SetConfig+0x30c>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b03      	cmp	r3, #3
 8003976:	d81b      	bhi.n	80039b0 <UART_SetConfig+0xd0>
 8003978:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <UART_SetConfig+0xa0>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	08003991 	.word	0x08003991
 8003984:	080039a1 	.word	0x080039a1
 8003988:	08003999 	.word	0x08003999
 800398c:	080039a9 	.word	0x080039a9
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e080      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003998:	2302      	movs	r3, #2
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e07c      	b.n	8003a9a <UART_SetConfig+0x1ba>
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e078      	b.n	8003a9a <UART_SetConfig+0x1ba>
 80039a8:	2308      	movs	r3, #8
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e074      	b.n	8003a9a <UART_SetConfig+0x1ba>
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e070      	b.n	8003a9a <UART_SetConfig+0x1ba>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a8c      	ldr	r2, [pc, #560]	; (8003bf0 <UART_SetConfig+0x310>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d138      	bne.n	8003a34 <UART_SetConfig+0x154>
 80039c2:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <UART_SetConfig+0x30c>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	d82d      	bhi.n	8003a2c <UART_SetConfig+0x14c>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0xf8>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003a2d 	.word	0x08003a2d
 80039e0:	08003a2d 	.word	0x08003a2d
 80039e4:	08003a2d 	.word	0x08003a2d
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a2d 	.word	0x08003a2d
 80039f0:	08003a2d 	.word	0x08003a2d
 80039f4:	08003a2d 	.word	0x08003a2d
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	08003a2d 	.word	0x08003a2d
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e042      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a14:	2302      	movs	r3, #2
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e03e      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e03a      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a24:	2308      	movs	r3, #8
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e036      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e032      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6a      	ldr	r2, [pc, #424]	; (8003be4 <UART_SetConfig+0x304>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d12a      	bne.n	8003a94 <UART_SetConfig+0x1b4>
 8003a3e:	4b6b      	ldr	r3, [pc, #428]	; (8003bec <UART_SetConfig+0x30c>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a4c:	d01a      	beq.n	8003a84 <UART_SetConfig+0x1a4>
 8003a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a52:	d81b      	bhi.n	8003a8c <UART_SetConfig+0x1ac>
 8003a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a58:	d00c      	beq.n	8003a74 <UART_SetConfig+0x194>
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	d815      	bhi.n	8003a8c <UART_SetConfig+0x1ac>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <UART_SetConfig+0x18c>
 8003a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a68:	d008      	beq.n	8003a7c <UART_SetConfig+0x19c>
 8003a6a:	e00f      	b.n	8003a8c <UART_SetConfig+0x1ac>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e012      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e00e      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e00a      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a84:	2308      	movs	r3, #8
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e006      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e002      	b.n	8003a9a <UART_SetConfig+0x1ba>
 8003a94:	2310      	movs	r3, #16
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a51      	ldr	r2, [pc, #324]	; (8003be4 <UART_SetConfig+0x304>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d17a      	bne.n	8003b9a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d824      	bhi.n	8003af6 <UART_SetConfig+0x216>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x1d4>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003af7 	.word	0x08003af7
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003af7 	.word	0x08003af7
 8003ac4:	08003ae7 	.word	0x08003ae7
 8003ac8:	08003af7 	.word	0x08003af7
 8003acc:	08003af7 	.word	0x08003af7
 8003ad0:	08003af7 	.word	0x08003af7
 8003ad4:	08003aef 	.word	0x08003aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f7fe fcce 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003adc:	61f8      	str	r0, [r7, #28]
        break;
 8003ade:	e010      	b.n	8003b02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae0:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <UART_SetConfig+0x314>)
 8003ae2:	61fb      	str	r3, [r7, #28]
        break;
 8003ae4:	e00d      	b.n	8003b02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae6:	f7fe fc2f 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003aea:	61f8      	str	r0, [r7, #28]
        break;
 8003aec:	e009      	b.n	8003b02 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	61fb      	str	r3, [r7, #28]
        break;
 8003af4:	e005      	b.n	8003b02 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8107 	beq.w	8003d18 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d305      	bcc.n	8003b26 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d903      	bls.n	8003b2e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b2c:	e0f4      	b.n	8003d18 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2200      	movs	r2, #0
 8003b32:	461c      	mov	r4, r3
 8003b34:	4615      	mov	r5, r2
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	022b      	lsls	r3, r5, #8
 8003b40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b44:	0222      	lsls	r2, r4, #8
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	6849      	ldr	r1, [r1, #4]
 8003b4a:	0849      	lsrs	r1, r1, #1
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	4688      	mov	r8, r1
 8003b50:	4681      	mov	r9, r0
 8003b52:	eb12 0a08 	adds.w	sl, r2, r8
 8003b56:	eb43 0b09 	adc.w	fp, r3, r9
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b68:	4650      	mov	r0, sl
 8003b6a:	4659      	mov	r1, fp
 8003b6c:	f7fc fb80 	bl	8000270 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7e:	d308      	bcc.n	8003b92 <UART_SetConfig+0x2b2>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b86:	d204      	bcs.n	8003b92 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	e0c2      	b.n	8003d18 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b98:	e0be      	b.n	8003d18 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba2:	d16a      	bne.n	8003c7a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d834      	bhi.n	8003c16 <UART_SetConfig+0x336>
 8003bac:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x2d4>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003bf9 	.word	0x08003bf9
 8003bbc:	08003c01 	.word	0x08003c01
 8003bc0:	08003c17 	.word	0x08003c17
 8003bc4:	08003c07 	.word	0x08003c07
 8003bc8:	08003c17 	.word	0x08003c17
 8003bcc:	08003c17 	.word	0x08003c17
 8003bd0:	08003c17 	.word	0x08003c17
 8003bd4:	08003c0f 	.word	0x08003c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7fe fc4e 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	61f8      	str	r0, [r7, #28]
        break;
 8003bde:	e020      	b.n	8003c22 <UART_SetConfig+0x342>
 8003be0:	efff69f3 	.word	0xefff69f3
 8003be4:	40008000 	.word	0x40008000
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40004400 	.word	0x40004400
 8003bf4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7fe fc54 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003bfc:	61f8      	str	r0, [r7, #28]
        break;
 8003bfe:	e010      	b.n	8003c22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c00:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <UART_SetConfig+0x454>)
 8003c02:	61fb      	str	r3, [r7, #28]
        break;
 8003c04:	e00d      	b.n	8003c22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c06:	f7fe fb9f 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003c0a:	61f8      	str	r0, [r7, #28]
        break;
 8003c0c:	e009      	b.n	8003c22 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c12:	61fb      	str	r3, [r7, #28]
        break;
 8003c14:	e005      	b.n	8003c22 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d077      	beq.n	8003d18 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005a      	lsls	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	441a      	add	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b0f      	cmp	r3, #15
 8003c42:	d916      	bls.n	8003c72 <UART_SetConfig+0x392>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4a:	d212      	bcs.n	8003c72 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f023 030f 	bic.w	r3, r3, #15
 8003c54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	8afa      	ldrh	r2, [r7, #22]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	e052      	b.n	8003d18 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c78:	e04e      	b.n	8003d18 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d827      	bhi.n	8003cd2 <UART_SetConfig+0x3f2>
 8003c82:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <UART_SetConfig+0x3a8>)
 8003c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cb5 	.word	0x08003cb5
 8003c90:	08003cbd 	.word	0x08003cbd
 8003c94:	08003cd3 	.word	0x08003cd3
 8003c98:	08003cc3 	.word	0x08003cc3
 8003c9c:	08003cd3 	.word	0x08003cd3
 8003ca0:	08003cd3 	.word	0x08003cd3
 8003ca4:	08003cd3 	.word	0x08003cd3
 8003ca8:	08003ccb 	.word	0x08003ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7fe fbe4 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	61f8      	str	r0, [r7, #28]
        break;
 8003cb2:	e014      	b.n	8003cde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb4:	f7fe fbf6 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003cb8:	61f8      	str	r0, [r7, #28]
        break;
 8003cba:	e010      	b.n	8003cde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <UART_SetConfig+0x454>)
 8003cbe:	61fb      	str	r3, [r7, #28]
        break;
 8003cc0:	e00d      	b.n	8003cde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc2:	f7fe fb41 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003cc6:	61f8      	str	r0, [r7, #28]
        break;
 8003cc8:	e009      	b.n	8003cde <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cce:	61fb      	str	r3, [r7, #28]
        break;
 8003cd0:	e005      	b.n	8003cde <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d019      	beq.n	8003d18 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	085a      	lsrs	r2, r3, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	441a      	add	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b0f      	cmp	r3, #15
 8003cfc:	d909      	bls.n	8003d12 <UART_SetConfig+0x432>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d205      	bcs.n	8003d12 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	e002      	b.n	8003d18 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3728      	adds	r7, #40	; 0x28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d32:	bf00      	nop
 8003d34:	00f42400 	.word	0x00f42400

08003d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e36:	d10a      	bne.n	8003e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e8c:	f7fd f992 	bl	80011b4 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d10e      	bne.n	8003ebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f82d 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e023      	b.n	8003f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d10e      	bne.n	8003eea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f817 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e00d      	b.n	8003f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b09c      	sub	sp, #112	; 0x70
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e0a5      	b.n	800406c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	f000 80a1 	beq.w	800406c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fd f943 	bl	80011b4 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d13e      	bne.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f54:	667b      	str	r3, [r7, #100]	; 0x64
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e6      	bne.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	663b      	str	r3, [r7, #96]	; 0x60
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e067      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d04f      	beq.n	800406c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fda:	d147      	bne.n	800406c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800400a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e6      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	613b      	str	r3, [r7, #16]
   return(result);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004038:	623a      	str	r2, [r7, #32]
 800403a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	6a3a      	ldr	r2, [r7, #32]
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	61bb      	str	r3, [r7, #24]
   return(result);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e010      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4013      	ands	r3, r2
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	429a      	cmp	r2, r3
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	429a      	cmp	r2, r3
 8004088:	f43f af4a 	beq.w	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3770      	adds	r7, #112	; 0x70
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004098:	b480      	push	{r7}
 800409a:	b097      	sub	sp, #92	; 0x5c
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d10e      	bne.n	80040ea <UART_Start_Receive_IT+0x52>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <UART_Start_Receive_IT+0x48>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040de:	e02d      	b.n	800413c <UART_Start_Receive_IT+0xa4>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	22ff      	movs	r2, #255	; 0xff
 80040e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e8:	e028      	b.n	800413c <UART_Start_Receive_IT+0xa4>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <UART_Start_Receive_IT+0x76>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <UART_Start_Receive_IT+0x6c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004102:	e01b      	b.n	800413c <UART_Start_Receive_IT+0xa4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	227f      	movs	r2, #127	; 0x7f
 8004108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800410c:	e016      	b.n	800413c <UART_Start_Receive_IT+0xa4>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004116:	d10d      	bne.n	8004134 <UART_Start_Receive_IT+0x9c>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <UART_Start_Receive_IT+0x92>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	227f      	movs	r2, #127	; 0x7f
 8004124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004128:	e008      	b.n	800413c <UART_Start_Receive_IT+0xa4>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	223f      	movs	r2, #63	; 0x3f
 800412e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004132:	e003      	b.n	800413c <UART_Start_Receive_IT+0xa4>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2222      	movs	r2, #34	; 0x22
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3308      	adds	r3, #8
 8004150:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	657b      	str	r3, [r7, #84]	; 0x54
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3308      	adds	r3, #8
 8004168:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800416a:	64ba      	str	r2, [r7, #72]	; 0x48
 800416c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e5      	bne.n	800414a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004186:	d107      	bne.n	8004198 <UART_Start_Receive_IT+0x100>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a24      	ldr	r2, [pc, #144]	; (8004224 <UART_Start_Receive_IT+0x18c>)
 8004194:	665a      	str	r2, [r3, #100]	; 0x64
 8004196:	e002      	b.n	800419e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a23      	ldr	r2, [pc, #140]	; (8004228 <UART_Start_Receive_IT+0x190>)
 800419c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
 80041ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e6      	bne.n	80041ae <UART_Start_Receive_IT+0x116>
 80041e0:	e018      	b.n	8004214 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	613b      	str	r3, [r7, #16]
   return(result);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f043 0320 	orr.w	r3, r3, #32
 80041f6:	653b      	str	r3, [r7, #80]	; 0x50
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69f9      	ldr	r1, [r7, #28]
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	61bb      	str	r3, [r7, #24]
   return(result);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e6      	bne.n	80041e2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	375c      	adds	r7, #92	; 0x5c
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	080044d3 	.word	0x080044d3
 8004228:	08004373 	.word	0x08004373

0800422c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b095      	sub	sp, #84	; 0x54
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004252:	643b      	str	r3, [r7, #64]	; 0x40
 8004254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e6      	bne.n	8004234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	61fb      	str	r3, [r7, #28]
   return(result);
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	64bb      	str	r3, [r7, #72]	; 0x48
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e5      	bne.n	8004266 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d118      	bne.n	80042d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f023 0310 	bic.w	r3, r3, #16
 80042b6:	647b      	str	r3, [r7, #68]	; 0x44
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6979      	ldr	r1, [r7, #20]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	613b      	str	r3, [r7, #16]
   return(result);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042e6:	bf00      	nop
 80042e8:	3754      	adds	r7, #84	; 0x54
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7ff fadb 	bl	80038cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b088      	sub	sp, #32
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	60bb      	str	r3, [r7, #8]
   return(result);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6979      	ldr	r1, [r7, #20]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	613b      	str	r3, [r7, #16]
   return(result);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e6      	bne.n	8004326 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fa9d 	bl	80038a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b096      	sub	sp, #88	; 0x58
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004380:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004388:	2b22      	cmp	r3, #34	; 0x22
 800438a:	f040 8094 	bne.w	80044b6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004394:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004398:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800439c:	b2d9      	uxtb	r1, r3
 800439e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	400a      	ands	r2, r1
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d179      	bne.n	80044ca <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ea:	653b      	str	r3, [r7, #80]	; 0x50
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f4:	647b      	str	r3, [r7, #68]	; 0x44
 80043f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	623b      	str	r3, [r7, #32]
   return(result);
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004428:	633a      	str	r2, [r7, #48]	; 0x30
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800442e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	2b01      	cmp	r3, #1
 800444e:	d12e      	bne.n	80044ae <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	60fb      	str	r3, [r7, #12]
   return(result);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0310 	bic.w	r3, r3, #16
 800446a:	64bb      	str	r3, [r7, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	617b      	str	r3, [r7, #20]
   return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e6      	bne.n	8004456 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b10      	cmp	r3, #16
 8004494:	d103      	bne.n	800449e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2210      	movs	r2, #16
 800449c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc f8c6 	bl	8000638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044ac:	e00d      	b.n	80044ca <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fa02 	bl	80038b8 <HAL_UART_RxCpltCallback>
}
 80044b4:	e009      	b.n	80044ca <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	8b1b      	ldrh	r3, [r3, #24]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0208 	orr.w	r2, r2, #8
 80044c6:	b292      	uxth	r2, r2
 80044c8:	831a      	strh	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	3758      	adds	r7, #88	; 0x58
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b096      	sub	sp, #88	; 0x58
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e8:	2b22      	cmp	r3, #34	; 0x22
 80044ea:	f040 8094 	bne.w	8004616 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80044fe:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004502:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004506:	4013      	ands	r3, r2
 8004508:	b29a      	uxth	r2, r3
 800450a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	1c9a      	adds	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d179      	bne.n	800462a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800454a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004554:	643b      	str	r3, [r7, #64]	; 0x40
 8004556:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800455a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e6      	bne.n	8004536 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	61fb      	str	r3, [r7, #28]
   return(result);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3308      	adds	r3, #8
 8004586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800458e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e5      	bne.n	8004568 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d12e      	bne.n	800460e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0310 	bic.w	r3, r3, #16
 80045ca:	647b      	str	r3, [r7, #68]	; 0x44
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6979      	ldr	r1, [r7, #20]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	613b      	str	r3, [r7, #16]
   return(result);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e6      	bne.n	80045b6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d103      	bne.n	80045fe <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2210      	movs	r2, #16
 80045fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc f816 	bl	8000638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800460c:	e00d      	b.n	800462a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff f952 	bl	80038b8 <HAL_UART_RxCpltCallback>
}
 8004614:	e009      	b.n	800462a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	8b1b      	ldrh	r3, [r3, #24]
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0208 	orr.w	r2, r2, #8
 8004626:	b292      	uxth	r2, r2
 8004628:	831a      	strh	r2, [r3, #24]
}
 800462a:	bf00      	nop
 800462c:	3758      	adds	r7, #88	; 0x58
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b08c      	sub	sp, #48	; 0x30
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004658:	2b20      	cmp	r3, #32
 800465a:	d14a      	bne.n	80046f2 <HAL_UARTEx_ReceiveToIdle_IT+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UARTEx_ReceiveToIdle_IT+0x22>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e043      	b.n	80046f4 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    }

    __HAL_LOCK(huart);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_UARTEx_ReceiveToIdle_IT+0x34>
 8004676:	2302      	movs	r3, #2
 8004678:	e03c      	b.n	80046f4 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	461a      	mov	r2, r3
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fd02 	bl	8004098 <UART_Start_Receive_IT>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800469a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d124      	bne.n	80046ec <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d11d      	bne.n	80046e6 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2210      	movs	r2, #16
 80046b0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	617b      	str	r3, [r7, #20]
   return(result);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f043 0310 	orr.w	r3, r3, #16
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6a39      	ldr	r1, [r7, #32]
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e6      	bne.n	80046b2 <HAL_UARTEx_ReceiveToIdle_IT+0x6c>
 80046e4:	e002      	b.n	80046ec <HAL_UARTEx_ReceiveToIdle_IT+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80046ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046f0:	e000      	b.n	80046f4 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3730      	adds	r7, #48	; 0x30
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <__errno>:
 80046fc:	4b01      	ldr	r3, [pc, #4]	; (8004704 <__errno+0x8>)
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c

08004708 <__libc_init_array>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	4d0d      	ldr	r5, [pc, #52]	; (8004740 <__libc_init_array+0x38>)
 800470c:	4c0d      	ldr	r4, [pc, #52]	; (8004744 <__libc_init_array+0x3c>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	2600      	movs	r6, #0
 8004714:	42a6      	cmp	r6, r4
 8004716:	d109      	bne.n	800472c <__libc_init_array+0x24>
 8004718:	4d0b      	ldr	r5, [pc, #44]	; (8004748 <__libc_init_array+0x40>)
 800471a:	4c0c      	ldr	r4, [pc, #48]	; (800474c <__libc_init_array+0x44>)
 800471c:	f001 f992 	bl	8005a44 <_init>
 8004720:	1b64      	subs	r4, r4, r5
 8004722:	10a4      	asrs	r4, r4, #2
 8004724:	2600      	movs	r6, #0
 8004726:	42a6      	cmp	r6, r4
 8004728:	d105      	bne.n	8004736 <__libc_init_array+0x2e>
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004730:	4798      	blx	r3
 8004732:	3601      	adds	r6, #1
 8004734:	e7ee      	b.n	8004714 <__libc_init_array+0xc>
 8004736:	f855 3b04 	ldr.w	r3, [r5], #4
 800473a:	4798      	blx	r3
 800473c:	3601      	adds	r6, #1
 800473e:	e7f2      	b.n	8004726 <__libc_init_array+0x1e>
 8004740:	08005e08 	.word	0x08005e08
 8004744:	08005e08 	.word	0x08005e08
 8004748:	08005e08 	.word	0x08005e08
 800474c:	08005e0c 	.word	0x08005e0c

08004750 <malloc>:
 8004750:	4b02      	ldr	r3, [pc, #8]	; (800475c <malloc+0xc>)
 8004752:	4601      	mov	r1, r0
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f000 b877 	b.w	8004848 <_malloc_r>
 800475a:	bf00      	nop
 800475c:	2000000c 	.word	0x2000000c

08004760 <memset>:
 8004760:	4402      	add	r2, r0
 8004762:	4603      	mov	r3, r0
 8004764:	4293      	cmp	r3, r2
 8004766:	d100      	bne.n	800476a <memset+0xa>
 8004768:	4770      	bx	lr
 800476a:	f803 1b01 	strb.w	r1, [r3], #1
 800476e:	e7f9      	b.n	8004764 <memset+0x4>

08004770 <_free_r>:
 8004770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004772:	2900      	cmp	r1, #0
 8004774:	d044      	beq.n	8004800 <_free_r+0x90>
 8004776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477a:	9001      	str	r0, [sp, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f1a1 0404 	sub.w	r4, r1, #4
 8004782:	bfb8      	it	lt
 8004784:	18e4      	addlt	r4, r4, r3
 8004786:	f000 fa13 	bl	8004bb0 <__malloc_lock>
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <_free_r+0x94>)
 800478c:	9801      	ldr	r0, [sp, #4]
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	b933      	cbnz	r3, 80047a0 <_free_r+0x30>
 8004792:	6063      	str	r3, [r4, #4]
 8004794:	6014      	str	r4, [r2, #0]
 8004796:	b003      	add	sp, #12
 8004798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800479c:	f000 ba0e 	b.w	8004bbc <__malloc_unlock>
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d908      	bls.n	80047b6 <_free_r+0x46>
 80047a4:	6825      	ldr	r5, [r4, #0]
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf01      	itttt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	1949      	addeq	r1, r1, r5
 80047b2:	6021      	streq	r1, [r4, #0]
 80047b4:	e7ed      	b.n	8004792 <_free_r+0x22>
 80047b6:	461a      	mov	r2, r3
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b10b      	cbz	r3, 80047c0 <_free_r+0x50>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d9fa      	bls.n	80047b6 <_free_r+0x46>
 80047c0:	6811      	ldr	r1, [r2, #0]
 80047c2:	1855      	adds	r5, r2, r1
 80047c4:	42a5      	cmp	r5, r4
 80047c6:	d10b      	bne.n	80047e0 <_free_r+0x70>
 80047c8:	6824      	ldr	r4, [r4, #0]
 80047ca:	4421      	add	r1, r4
 80047cc:	1854      	adds	r4, r2, r1
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	6011      	str	r1, [r2, #0]
 80047d2:	d1e0      	bne.n	8004796 <_free_r+0x26>
 80047d4:	681c      	ldr	r4, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	6053      	str	r3, [r2, #4]
 80047da:	4421      	add	r1, r4
 80047dc:	6011      	str	r1, [r2, #0]
 80047de:	e7da      	b.n	8004796 <_free_r+0x26>
 80047e0:	d902      	bls.n	80047e8 <_free_r+0x78>
 80047e2:	230c      	movs	r3, #12
 80047e4:	6003      	str	r3, [r0, #0]
 80047e6:	e7d6      	b.n	8004796 <_free_r+0x26>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf04      	itt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	6063      	str	r3, [r4, #4]
 80047f6:	bf04      	itt	eq
 80047f8:	1949      	addeq	r1, r1, r5
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	6054      	str	r4, [r2, #4]
 80047fe:	e7ca      	b.n	8004796 <_free_r+0x26>
 8004800:	b003      	add	sp, #12
 8004802:	bd30      	pop	{r4, r5, pc}
 8004804:	200001c8 	.word	0x200001c8

08004808 <sbrk_aligned>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4e0e      	ldr	r6, [pc, #56]	; (8004844 <sbrk_aligned+0x3c>)
 800480c:	460c      	mov	r4, r1
 800480e:	6831      	ldr	r1, [r6, #0]
 8004810:	4605      	mov	r5, r0
 8004812:	b911      	cbnz	r1, 800481a <sbrk_aligned+0x12>
 8004814:	f000 f8a4 	bl	8004960 <_sbrk_r>
 8004818:	6030      	str	r0, [r6, #0]
 800481a:	4621      	mov	r1, r4
 800481c:	4628      	mov	r0, r5
 800481e:	f000 f89f 	bl	8004960 <_sbrk_r>
 8004822:	1c43      	adds	r3, r0, #1
 8004824:	d00a      	beq.n	800483c <sbrk_aligned+0x34>
 8004826:	1cc4      	adds	r4, r0, #3
 8004828:	f024 0403 	bic.w	r4, r4, #3
 800482c:	42a0      	cmp	r0, r4
 800482e:	d007      	beq.n	8004840 <sbrk_aligned+0x38>
 8004830:	1a21      	subs	r1, r4, r0
 8004832:	4628      	mov	r0, r5
 8004834:	f000 f894 	bl	8004960 <_sbrk_r>
 8004838:	3001      	adds	r0, #1
 800483a:	d101      	bne.n	8004840 <sbrk_aligned+0x38>
 800483c:	f04f 34ff 	mov.w	r4, #4294967295
 8004840:	4620      	mov	r0, r4
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	200001cc 	.word	0x200001cc

08004848 <_malloc_r>:
 8004848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484c:	1ccd      	adds	r5, r1, #3
 800484e:	f025 0503 	bic.w	r5, r5, #3
 8004852:	3508      	adds	r5, #8
 8004854:	2d0c      	cmp	r5, #12
 8004856:	bf38      	it	cc
 8004858:	250c      	movcc	r5, #12
 800485a:	2d00      	cmp	r5, #0
 800485c:	4607      	mov	r7, r0
 800485e:	db01      	blt.n	8004864 <_malloc_r+0x1c>
 8004860:	42a9      	cmp	r1, r5
 8004862:	d905      	bls.n	8004870 <_malloc_r+0x28>
 8004864:	230c      	movs	r3, #12
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	2600      	movs	r6, #0
 800486a:	4630      	mov	r0, r6
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	4e2e      	ldr	r6, [pc, #184]	; (800492c <_malloc_r+0xe4>)
 8004872:	f000 f99d 	bl	8004bb0 <__malloc_lock>
 8004876:	6833      	ldr	r3, [r6, #0]
 8004878:	461c      	mov	r4, r3
 800487a:	bb34      	cbnz	r4, 80048ca <_malloc_r+0x82>
 800487c:	4629      	mov	r1, r5
 800487e:	4638      	mov	r0, r7
 8004880:	f7ff ffc2 	bl	8004808 <sbrk_aligned>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	4604      	mov	r4, r0
 8004888:	d14d      	bne.n	8004926 <_malloc_r+0xde>
 800488a:	6834      	ldr	r4, [r6, #0]
 800488c:	4626      	mov	r6, r4
 800488e:	2e00      	cmp	r6, #0
 8004890:	d140      	bne.n	8004914 <_malloc_r+0xcc>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	4631      	mov	r1, r6
 8004896:	4638      	mov	r0, r7
 8004898:	eb04 0803 	add.w	r8, r4, r3
 800489c:	f000 f860 	bl	8004960 <_sbrk_r>
 80048a0:	4580      	cmp	r8, r0
 80048a2:	d13a      	bne.n	800491a <_malloc_r+0xd2>
 80048a4:	6821      	ldr	r1, [r4, #0]
 80048a6:	3503      	adds	r5, #3
 80048a8:	1a6d      	subs	r5, r5, r1
 80048aa:	f025 0503 	bic.w	r5, r5, #3
 80048ae:	3508      	adds	r5, #8
 80048b0:	2d0c      	cmp	r5, #12
 80048b2:	bf38      	it	cc
 80048b4:	250c      	movcc	r5, #12
 80048b6:	4629      	mov	r1, r5
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7ff ffa5 	bl	8004808 <sbrk_aligned>
 80048be:	3001      	adds	r0, #1
 80048c0:	d02b      	beq.n	800491a <_malloc_r+0xd2>
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	442b      	add	r3, r5
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	e00e      	b.n	80048e8 <_malloc_r+0xa0>
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	1b52      	subs	r2, r2, r5
 80048ce:	d41e      	bmi.n	800490e <_malloc_r+0xc6>
 80048d0:	2a0b      	cmp	r2, #11
 80048d2:	d916      	bls.n	8004902 <_malloc_r+0xba>
 80048d4:	1961      	adds	r1, r4, r5
 80048d6:	42a3      	cmp	r3, r4
 80048d8:	6025      	str	r5, [r4, #0]
 80048da:	bf18      	it	ne
 80048dc:	6059      	strne	r1, [r3, #4]
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	bf08      	it	eq
 80048e2:	6031      	streq	r1, [r6, #0]
 80048e4:	5162      	str	r2, [r4, r5]
 80048e6:	604b      	str	r3, [r1, #4]
 80048e8:	4638      	mov	r0, r7
 80048ea:	f104 060b 	add.w	r6, r4, #11
 80048ee:	f000 f965 	bl	8004bbc <__malloc_unlock>
 80048f2:	f026 0607 	bic.w	r6, r6, #7
 80048f6:	1d23      	adds	r3, r4, #4
 80048f8:	1af2      	subs	r2, r6, r3
 80048fa:	d0b6      	beq.n	800486a <_malloc_r+0x22>
 80048fc:	1b9b      	subs	r3, r3, r6
 80048fe:	50a3      	str	r3, [r4, r2]
 8004900:	e7b3      	b.n	800486a <_malloc_r+0x22>
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	42a3      	cmp	r3, r4
 8004906:	bf0c      	ite	eq
 8004908:	6032      	streq	r2, [r6, #0]
 800490a:	605a      	strne	r2, [r3, #4]
 800490c:	e7ec      	b.n	80048e8 <_malloc_r+0xa0>
 800490e:	4623      	mov	r3, r4
 8004910:	6864      	ldr	r4, [r4, #4]
 8004912:	e7b2      	b.n	800487a <_malloc_r+0x32>
 8004914:	4634      	mov	r4, r6
 8004916:	6876      	ldr	r6, [r6, #4]
 8004918:	e7b9      	b.n	800488e <_malloc_r+0x46>
 800491a:	230c      	movs	r3, #12
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4638      	mov	r0, r7
 8004920:	f000 f94c 	bl	8004bbc <__malloc_unlock>
 8004924:	e7a1      	b.n	800486a <_malloc_r+0x22>
 8004926:	6025      	str	r5, [r4, #0]
 8004928:	e7de      	b.n	80048e8 <_malloc_r+0xa0>
 800492a:	bf00      	nop
 800492c:	200001c8 	.word	0x200001c8

08004930 <iprintf>:
 8004930:	b40f      	push	{r0, r1, r2, r3}
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <iprintf+0x2c>)
 8004934:	b513      	push	{r0, r1, r4, lr}
 8004936:	681c      	ldr	r4, [r3, #0]
 8004938:	b124      	cbz	r4, 8004944 <iprintf+0x14>
 800493a:	69a3      	ldr	r3, [r4, #24]
 800493c:	b913      	cbnz	r3, 8004944 <iprintf+0x14>
 800493e:	4620      	mov	r0, r4
 8004940:	f000 f896 	bl	8004a70 <__sinit>
 8004944:	ab05      	add	r3, sp, #20
 8004946:	9a04      	ldr	r2, [sp, #16]
 8004948:	68a1      	ldr	r1, [r4, #8]
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	4620      	mov	r0, r4
 800494e:	f000 fac1 	bl	8004ed4 <_vfiprintf_r>
 8004952:	b002      	add	sp, #8
 8004954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004958:	b004      	add	sp, #16
 800495a:	4770      	bx	lr
 800495c:	2000000c 	.word	0x2000000c

08004960 <_sbrk_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4d06      	ldr	r5, [pc, #24]	; (800497c <_sbrk_r+0x1c>)
 8004964:	2300      	movs	r3, #0
 8004966:	4604      	mov	r4, r0
 8004968:	4608      	mov	r0, r1
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	f7fc fb48 	bl	8001000 <_sbrk>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_sbrk_r+0x1a>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_sbrk_r+0x1a>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	200001d4 	.word	0x200001d4

08004980 <siprintf>:
 8004980:	b40e      	push	{r1, r2, r3}
 8004982:	b500      	push	{lr}
 8004984:	b09c      	sub	sp, #112	; 0x70
 8004986:	ab1d      	add	r3, sp, #116	; 0x74
 8004988:	9002      	str	r0, [sp, #8]
 800498a:	9006      	str	r0, [sp, #24]
 800498c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004990:	4809      	ldr	r0, [pc, #36]	; (80049b8 <siprintf+0x38>)
 8004992:	9107      	str	r1, [sp, #28]
 8004994:	9104      	str	r1, [sp, #16]
 8004996:	4909      	ldr	r1, [pc, #36]	; (80049bc <siprintf+0x3c>)
 8004998:	f853 2b04 	ldr.w	r2, [r3], #4
 800499c:	9105      	str	r1, [sp, #20]
 800499e:	6800      	ldr	r0, [r0, #0]
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	a902      	add	r1, sp, #8
 80049a4:	f000 f96c 	bl	8004c80 <_svfiprintf_r>
 80049a8:	9b02      	ldr	r3, [sp, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	b01c      	add	sp, #112	; 0x70
 80049b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b4:	b003      	add	sp, #12
 80049b6:	4770      	bx	lr
 80049b8:	2000000c 	.word	0x2000000c
 80049bc:	ffff0208 	.word	0xffff0208

080049c0 <std>:
 80049c0:	2300      	movs	r3, #0
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ce:	6083      	str	r3, [r0, #8]
 80049d0:	8181      	strh	r1, [r0, #12]
 80049d2:	6643      	str	r3, [r0, #100]	; 0x64
 80049d4:	81c2      	strh	r2, [r0, #14]
 80049d6:	6183      	str	r3, [r0, #24]
 80049d8:	4619      	mov	r1, r3
 80049da:	2208      	movs	r2, #8
 80049dc:	305c      	adds	r0, #92	; 0x5c
 80049de:	f7ff febf 	bl	8004760 <memset>
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <std+0x38>)
 80049e4:	6263      	str	r3, [r4, #36]	; 0x24
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <std+0x3c>)
 80049e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <std+0x40>)
 80049ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <std+0x44>)
 80049f0:	6224      	str	r4, [r4, #32]
 80049f2:	6323      	str	r3, [r4, #48]	; 0x30
 80049f4:	bd10      	pop	{r4, pc}
 80049f6:	bf00      	nop
 80049f8:	0800545d 	.word	0x0800545d
 80049fc:	0800547f 	.word	0x0800547f
 8004a00:	080054b7 	.word	0x080054b7
 8004a04:	080054db 	.word	0x080054db

08004a08 <_cleanup_r>:
 8004a08:	4901      	ldr	r1, [pc, #4]	; (8004a10 <_cleanup_r+0x8>)
 8004a0a:	f000 b8af 	b.w	8004b6c <_fwalk_reent>
 8004a0e:	bf00      	nop
 8004a10:	080057b5 	.word	0x080057b5

08004a14 <__sfmoreglue>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	2268      	movs	r2, #104	; 0x68
 8004a18:	1e4d      	subs	r5, r1, #1
 8004a1a:	4355      	muls	r5, r2
 8004a1c:	460e      	mov	r6, r1
 8004a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a22:	f7ff ff11 	bl	8004848 <_malloc_r>
 8004a26:	4604      	mov	r4, r0
 8004a28:	b140      	cbz	r0, 8004a3c <__sfmoreglue+0x28>
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a30:	300c      	adds	r0, #12
 8004a32:	60a0      	str	r0, [r4, #8]
 8004a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a38:	f7ff fe92 	bl	8004760 <memset>
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}

08004a40 <__sfp_lock_acquire>:
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <__sfp_lock_acquire+0x8>)
 8004a42:	f000 b8b3 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8004a46:	bf00      	nop
 8004a48:	200001d1 	.word	0x200001d1

08004a4c <__sfp_lock_release>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__sfp_lock_release+0x8>)
 8004a4e:	f000 b8ae 	b.w	8004bae <__retarget_lock_release_recursive>
 8004a52:	bf00      	nop
 8004a54:	200001d1 	.word	0x200001d1

08004a58 <__sinit_lock_acquire>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__sinit_lock_acquire+0x8>)
 8004a5a:	f000 b8a7 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8004a5e:	bf00      	nop
 8004a60:	200001d2 	.word	0x200001d2

08004a64 <__sinit_lock_release>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__sinit_lock_release+0x8>)
 8004a66:	f000 b8a2 	b.w	8004bae <__retarget_lock_release_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	200001d2 	.word	0x200001d2

08004a70 <__sinit>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4604      	mov	r4, r0
 8004a74:	f7ff fff0 	bl	8004a58 <__sinit_lock_acquire>
 8004a78:	69a3      	ldr	r3, [r4, #24]
 8004a7a:	b11b      	cbz	r3, 8004a84 <__sinit+0x14>
 8004a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a80:	f7ff bff0 	b.w	8004a64 <__sinit_lock_release>
 8004a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a88:	6523      	str	r3, [r4, #80]	; 0x50
 8004a8a:	4b13      	ldr	r3, [pc, #76]	; (8004ad8 <__sinit+0x68>)
 8004a8c:	4a13      	ldr	r2, [pc, #76]	; (8004adc <__sinit+0x6c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a92:	42a3      	cmp	r3, r4
 8004a94:	bf04      	itt	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	61a3      	streq	r3, [r4, #24]
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f000 f820 	bl	8004ae0 <__sfp>
 8004aa0:	6060      	str	r0, [r4, #4]
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f000 f81c 	bl	8004ae0 <__sfp>
 8004aa8:	60a0      	str	r0, [r4, #8]
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f000 f818 	bl	8004ae0 <__sfp>
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	60e0      	str	r0, [r4, #12]
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	6860      	ldr	r0, [r4, #4]
 8004ab8:	f7ff ff82 	bl	80049c0 <std>
 8004abc:	68a0      	ldr	r0, [r4, #8]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2109      	movs	r1, #9
 8004ac2:	f7ff ff7d 	bl	80049c0 <std>
 8004ac6:	68e0      	ldr	r0, [r4, #12]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	2112      	movs	r1, #18
 8004acc:	f7ff ff78 	bl	80049c0 <std>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	61a3      	str	r3, [r4, #24]
 8004ad4:	e7d2      	b.n	8004a7c <__sinit+0xc>
 8004ad6:	bf00      	nop
 8004ad8:	08005d68 	.word	0x08005d68
 8004adc:	08004a09 	.word	0x08004a09

08004ae0 <__sfp>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	4607      	mov	r7, r0
 8004ae4:	f7ff ffac 	bl	8004a40 <__sfp_lock_acquire>
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <__sfp+0x84>)
 8004aea:	681e      	ldr	r6, [r3, #0]
 8004aec:	69b3      	ldr	r3, [r6, #24]
 8004aee:	b913      	cbnz	r3, 8004af6 <__sfp+0x16>
 8004af0:	4630      	mov	r0, r6
 8004af2:	f7ff ffbd 	bl	8004a70 <__sinit>
 8004af6:	3648      	adds	r6, #72	; 0x48
 8004af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	d503      	bpl.n	8004b08 <__sfp+0x28>
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	b30b      	cbz	r3, 8004b48 <__sfp+0x68>
 8004b04:	6836      	ldr	r6, [r6, #0]
 8004b06:	e7f7      	b.n	8004af8 <__sfp+0x18>
 8004b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b0c:	b9d5      	cbnz	r5, 8004b44 <__sfp+0x64>
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <__sfp+0x88>)
 8004b10:	60e3      	str	r3, [r4, #12]
 8004b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b16:	6665      	str	r5, [r4, #100]	; 0x64
 8004b18:	f000 f847 	bl	8004baa <__retarget_lock_init_recursive>
 8004b1c:	f7ff ff96 	bl	8004a4c <__sfp_lock_release>
 8004b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b28:	6025      	str	r5, [r4, #0]
 8004b2a:	61a5      	str	r5, [r4, #24]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	4629      	mov	r1, r5
 8004b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b34:	f7ff fe14 	bl	8004760 <memset>
 8004b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b40:	4620      	mov	r0, r4
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b44:	3468      	adds	r4, #104	; 0x68
 8004b46:	e7d9      	b.n	8004afc <__sfp+0x1c>
 8004b48:	2104      	movs	r1, #4
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f7ff ff62 	bl	8004a14 <__sfmoreglue>
 8004b50:	4604      	mov	r4, r0
 8004b52:	6030      	str	r0, [r6, #0]
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d1d5      	bne.n	8004b04 <__sfp+0x24>
 8004b58:	f7ff ff78 	bl	8004a4c <__sfp_lock_release>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	e7ee      	b.n	8004b40 <__sfp+0x60>
 8004b62:	bf00      	nop
 8004b64:	08005d68 	.word	0x08005d68
 8004b68:	ffff0001 	.word	0xffff0001

08004b6c <_fwalk_reent>:
 8004b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b70:	4606      	mov	r6, r0
 8004b72:	4688      	mov	r8, r1
 8004b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b78:	2700      	movs	r7, #0
 8004b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b82:	d505      	bpl.n	8004b90 <_fwalk_reent+0x24>
 8004b84:	6824      	ldr	r4, [r4, #0]
 8004b86:	2c00      	cmp	r4, #0
 8004b88:	d1f7      	bne.n	8004b7a <_fwalk_reent+0xe>
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b90:	89ab      	ldrh	r3, [r5, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d907      	bls.n	8004ba6 <_fwalk_reent+0x3a>
 8004b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	d003      	beq.n	8004ba6 <_fwalk_reent+0x3a>
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	47c0      	blx	r8
 8004ba4:	4307      	orrs	r7, r0
 8004ba6:	3568      	adds	r5, #104	; 0x68
 8004ba8:	e7e9      	b.n	8004b7e <_fwalk_reent+0x12>

08004baa <__retarget_lock_init_recursive>:
 8004baa:	4770      	bx	lr

08004bac <__retarget_lock_acquire_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_release_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <__malloc_lock>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__malloc_lock+0x8>)
 8004bb2:	f7ff bffb 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	200001d0 	.word	0x200001d0

08004bbc <__malloc_unlock>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__malloc_unlock+0x8>)
 8004bbe:	f7ff bff6 	b.w	8004bae <__retarget_lock_release_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	200001d0 	.word	0x200001d0

08004bc8 <__ssputs_r>:
 8004bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	688e      	ldr	r6, [r1, #8]
 8004bce:	429e      	cmp	r6, r3
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4690      	mov	r8, r2
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	d838      	bhi.n	8004c4c <__ssputs_r+0x84>
 8004bda:	898a      	ldrh	r2, [r1, #12]
 8004bdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004be0:	d032      	beq.n	8004c48 <__ssputs_r+0x80>
 8004be2:	6825      	ldr	r5, [r4, #0]
 8004be4:	6909      	ldr	r1, [r1, #16]
 8004be6:	eba5 0901 	sub.w	r9, r5, r1
 8004bea:	6965      	ldr	r5, [r4, #20]
 8004bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	444b      	add	r3, r9
 8004bf8:	106d      	asrs	r5, r5, #1
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	bf38      	it	cc
 8004bfe:	461d      	movcc	r5, r3
 8004c00:	0553      	lsls	r3, r2, #21
 8004c02:	d531      	bpl.n	8004c68 <__ssputs_r+0xa0>
 8004c04:	4629      	mov	r1, r5
 8004c06:	f7ff fe1f 	bl	8004848 <_malloc_r>
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	b950      	cbnz	r0, 8004c24 <__ssputs_r+0x5c>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	f8ca 3000 	str.w	r3, [sl]
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	6921      	ldr	r1, [r4, #16]
 8004c26:	464a      	mov	r2, r9
 8004c28:	f000 fe78 	bl	800591c <memcpy>
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	81a3      	strh	r3, [r4, #12]
 8004c38:	6126      	str	r6, [r4, #16]
 8004c3a:	6165      	str	r5, [r4, #20]
 8004c3c:	444e      	add	r6, r9
 8004c3e:	eba5 0509 	sub.w	r5, r5, r9
 8004c42:	6026      	str	r6, [r4, #0]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	463e      	mov	r6, r7
 8004c48:	42be      	cmp	r6, r7
 8004c4a:	d900      	bls.n	8004c4e <__ssputs_r+0x86>
 8004c4c:	463e      	mov	r6, r7
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	4632      	mov	r2, r6
 8004c52:	4641      	mov	r1, r8
 8004c54:	f000 fe70 	bl	8005938 <memmove>
 8004c58:	68a3      	ldr	r3, [r4, #8]
 8004c5a:	1b9b      	subs	r3, r3, r6
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	4433      	add	r3, r6
 8004c62:	6023      	str	r3, [r4, #0]
 8004c64:	2000      	movs	r0, #0
 8004c66:	e7db      	b.n	8004c20 <__ssputs_r+0x58>
 8004c68:	462a      	mov	r2, r5
 8004c6a:	f000 fe7f 	bl	800596c <_realloc_r>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d1e1      	bne.n	8004c38 <__ssputs_r+0x70>
 8004c74:	6921      	ldr	r1, [r4, #16]
 8004c76:	4650      	mov	r0, sl
 8004c78:	f7ff fd7a 	bl	8004770 <_free_r>
 8004c7c:	e7c7      	b.n	8004c0e <__ssputs_r+0x46>
	...

08004c80 <_svfiprintf_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4698      	mov	r8, r3
 8004c86:	898b      	ldrh	r3, [r1, #12]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	b09d      	sub	sp, #116	; 0x74
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	4614      	mov	r4, r2
 8004c92:	d50e      	bpl.n	8004cb2 <_svfiprintf_r+0x32>
 8004c94:	690b      	ldr	r3, [r1, #16]
 8004c96:	b963      	cbnz	r3, 8004cb2 <_svfiprintf_r+0x32>
 8004c98:	2140      	movs	r1, #64	; 0x40
 8004c9a:	f7ff fdd5 	bl	8004848 <_malloc_r>
 8004c9e:	6028      	str	r0, [r5, #0]
 8004ca0:	6128      	str	r0, [r5, #16]
 8004ca2:	b920      	cbnz	r0, 8004cae <_svfiprintf_r+0x2e>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	e0d1      	b.n	8004e52 <_svfiprintf_r+0x1d2>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	616b      	str	r3, [r5, #20]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc0:	2330      	movs	r3, #48	; 0x30
 8004cc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e6c <_svfiprintf_r+0x1ec>
 8004cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cca:	f04f 0901 	mov.w	r9, #1
 8004cce:	4623      	mov	r3, r4
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd6:	b10a      	cbz	r2, 8004cdc <_svfiprintf_r+0x5c>
 8004cd8:	2a25      	cmp	r2, #37	; 0x25
 8004cda:	d1f9      	bne.n	8004cd0 <_svfiprintf_r+0x50>
 8004cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce0:	d00b      	beq.n	8004cfa <_svfiprintf_r+0x7a>
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff ff6d 	bl	8004bc8 <__ssputs_r>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f000 80aa 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf6:	445a      	add	r2, fp
 8004cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8004cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a2 	beq.w	8004e48 <_svfiprintf_r+0x1c8>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0e:	f10a 0a01 	add.w	sl, sl, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	9307      	str	r3, [sp, #28]
 8004d16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d1c:	4654      	mov	r4, sl
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	4851      	ldr	r0, [pc, #324]	; (8004e6c <_svfiprintf_r+0x1ec>)
 8004d26:	f7fb fa53 	bl	80001d0 <memchr>
 8004d2a:	9a04      	ldr	r2, [sp, #16]
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_svfiprintf_r+0xe6>
 8004d2e:	06d0      	lsls	r0, r2, #27
 8004d30:	bf44      	itt	mi
 8004d32:	2320      	movmi	r3, #32
 8004d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d38:	0711      	lsls	r1, r2, #28
 8004d3a:	bf44      	itt	mi
 8004d3c:	232b      	movmi	r3, #43	; 0x2b
 8004d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d42:	f89a 3000 	ldrb.w	r3, [sl]
 8004d46:	2b2a      	cmp	r3, #42	; 0x2a
 8004d48:	d015      	beq.n	8004d76 <_svfiprintf_r+0xf6>
 8004d4a:	9a07      	ldr	r2, [sp, #28]
 8004d4c:	4654      	mov	r4, sl
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f04f 0c0a 	mov.w	ip, #10
 8004d54:	4621      	mov	r1, r4
 8004d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d5a:	3b30      	subs	r3, #48	; 0x30
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d94e      	bls.n	8004dfe <_svfiprintf_r+0x17e>
 8004d60:	b1b0      	cbz	r0, 8004d90 <_svfiprintf_r+0x110>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e014      	b.n	8004d90 <_svfiprintf_r+0x110>
 8004d66:	eba0 0308 	sub.w	r3, r0, r8
 8004d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	46a2      	mov	sl, r4
 8004d74:	e7d2      	b.n	8004d1c <_svfiprintf_r+0x9c>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfbb      	ittet	lt
 8004d82:	425b      	neglt	r3, r3
 8004d84:	f042 0202 	orrlt.w	r2, r2, #2
 8004d88:	9307      	strge	r3, [sp, #28]
 8004d8a:	9307      	strlt	r3, [sp, #28]
 8004d8c:	bfb8      	it	lt
 8004d8e:	9204      	strlt	r2, [sp, #16]
 8004d90:	7823      	ldrb	r3, [r4, #0]
 8004d92:	2b2e      	cmp	r3, #46	; 0x2e
 8004d94:	d10c      	bne.n	8004db0 <_svfiprintf_r+0x130>
 8004d96:	7863      	ldrb	r3, [r4, #1]
 8004d98:	2b2a      	cmp	r3, #42	; 0x2a
 8004d9a:	d135      	bne.n	8004e08 <_svfiprintf_r+0x188>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	9203      	str	r2, [sp, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bfb8      	it	lt
 8004da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dac:	3402      	adds	r4, #2
 8004dae:	9305      	str	r3, [sp, #20]
 8004db0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e7c <_svfiprintf_r+0x1fc>
 8004db4:	7821      	ldrb	r1, [r4, #0]
 8004db6:	2203      	movs	r2, #3
 8004db8:	4650      	mov	r0, sl
 8004dba:	f7fb fa09 	bl	80001d0 <memchr>
 8004dbe:	b140      	cbz	r0, 8004dd2 <_svfiprintf_r+0x152>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	eba0 000a 	sub.w	r0, r0, sl
 8004dc6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dca:	9b04      	ldr	r3, [sp, #16]
 8004dcc:	4303      	orrs	r3, r0
 8004dce:	3401      	adds	r4, #1
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd6:	4826      	ldr	r0, [pc, #152]	; (8004e70 <_svfiprintf_r+0x1f0>)
 8004dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ddc:	2206      	movs	r2, #6
 8004dde:	f7fb f9f7 	bl	80001d0 <memchr>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d038      	beq.n	8004e58 <_svfiprintf_r+0x1d8>
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <_svfiprintf_r+0x1f4>)
 8004de8:	bb1b      	cbnz	r3, 8004e32 <_svfiprintf_r+0x1b2>
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	3307      	adds	r3, #7
 8004dee:	f023 0307 	bic.w	r3, r3, #7
 8004df2:	3308      	adds	r3, #8
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df8:	4433      	add	r3, r6
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	e767      	b.n	8004cce <_svfiprintf_r+0x4e>
 8004dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e02:	460c      	mov	r4, r1
 8004e04:	2001      	movs	r0, #1
 8004e06:	e7a5      	b.n	8004d54 <_svfiprintf_r+0xd4>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	3401      	adds	r4, #1
 8004e0c:	9305      	str	r3, [sp, #20]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f04f 0c0a 	mov.w	ip, #10
 8004e14:	4620      	mov	r0, r4
 8004e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e1a:	3a30      	subs	r2, #48	; 0x30
 8004e1c:	2a09      	cmp	r2, #9
 8004e1e:	d903      	bls.n	8004e28 <_svfiprintf_r+0x1a8>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0c5      	beq.n	8004db0 <_svfiprintf_r+0x130>
 8004e24:	9105      	str	r1, [sp, #20]
 8004e26:	e7c3      	b.n	8004db0 <_svfiprintf_r+0x130>
 8004e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e7f0      	b.n	8004e14 <_svfiprintf_r+0x194>
 8004e32:	ab03      	add	r3, sp, #12
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	462a      	mov	r2, r5
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e3a:	a904      	add	r1, sp, #16
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	f3af 8000 	nop.w
 8004e42:	1c42      	adds	r2, r0, #1
 8004e44:	4606      	mov	r6, r0
 8004e46:	d1d6      	bne.n	8004df6 <_svfiprintf_r+0x176>
 8004e48:	89ab      	ldrh	r3, [r5, #12]
 8004e4a:	065b      	lsls	r3, r3, #25
 8004e4c:	f53f af2c 	bmi.w	8004ca8 <_svfiprintf_r+0x28>
 8004e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e52:	b01d      	add	sp, #116	; 0x74
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e58:	ab03      	add	r3, sp, #12
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <_svfiprintf_r+0x1f8>)
 8004e60:	a904      	add	r1, sp, #16
 8004e62:	4638      	mov	r0, r7
 8004e64:	f000 f9d4 	bl	8005210 <_printf_i>
 8004e68:	e7eb      	b.n	8004e42 <_svfiprintf_r+0x1c2>
 8004e6a:	bf00      	nop
 8004e6c:	08005dcc 	.word	0x08005dcc
 8004e70:	08005dd6 	.word	0x08005dd6
 8004e74:	00000000 	.word	0x00000000
 8004e78:	08004bc9 	.word	0x08004bc9
 8004e7c:	08005dd2 	.word	0x08005dd2

08004e80 <__sfputc_r>:
 8004e80:	6893      	ldr	r3, [r2, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	b410      	push	{r4}
 8004e88:	6093      	str	r3, [r2, #8]
 8004e8a:	da08      	bge.n	8004e9e <__sfputc_r+0x1e>
 8004e8c:	6994      	ldr	r4, [r2, #24]
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	db01      	blt.n	8004e96 <__sfputc_r+0x16>
 8004e92:	290a      	cmp	r1, #10
 8004e94:	d103      	bne.n	8004e9e <__sfputc_r+0x1e>
 8004e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9a:	f000 bb23 	b.w	80054e4 <__swbuf_r>
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	1c58      	adds	r0, r3, #1
 8004ea2:	6010      	str	r0, [r2, #0]
 8004ea4:	7019      	strb	r1, [r3, #0]
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <__sfputs_r>:
 8004eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	460f      	mov	r7, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	18d5      	adds	r5, r2, r3
 8004eb8:	42ac      	cmp	r4, r5
 8004eba:	d101      	bne.n	8004ec0 <__sfputs_r+0x12>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e007      	b.n	8004ed0 <__sfputs_r+0x22>
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7ff ffda 	bl	8004e80 <__sfputc_r>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d1f3      	bne.n	8004eb8 <__sfputs_r+0xa>
 8004ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed4 <_vfiprintf_r>:
 8004ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	460d      	mov	r5, r1
 8004eda:	b09d      	sub	sp, #116	; 0x74
 8004edc:	4614      	mov	r4, r2
 8004ede:	4698      	mov	r8, r3
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	b118      	cbz	r0, 8004eec <_vfiprintf_r+0x18>
 8004ee4:	6983      	ldr	r3, [r0, #24]
 8004ee6:	b90b      	cbnz	r3, 8004eec <_vfiprintf_r+0x18>
 8004ee8:	f7ff fdc2 	bl	8004a70 <__sinit>
 8004eec:	4b89      	ldr	r3, [pc, #548]	; (8005114 <_vfiprintf_r+0x240>)
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	d11b      	bne.n	8004f2a <_vfiprintf_r+0x56>
 8004ef2:	6875      	ldr	r5, [r6, #4]
 8004ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ef6:	07d9      	lsls	r1, r3, #31
 8004ef8:	d405      	bmi.n	8004f06 <_vfiprintf_r+0x32>
 8004efa:	89ab      	ldrh	r3, [r5, #12]
 8004efc:	059a      	lsls	r2, r3, #22
 8004efe:	d402      	bmi.n	8004f06 <_vfiprintf_r+0x32>
 8004f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f02:	f7ff fe53 	bl	8004bac <__retarget_lock_acquire_recursive>
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	d501      	bpl.n	8004f10 <_vfiprintf_r+0x3c>
 8004f0c:	692b      	ldr	r3, [r5, #16]
 8004f0e:	b9eb      	cbnz	r3, 8004f4c <_vfiprintf_r+0x78>
 8004f10:	4629      	mov	r1, r5
 8004f12:	4630      	mov	r0, r6
 8004f14:	f000 fb4a 	bl	80055ac <__swsetup_r>
 8004f18:	b1c0      	cbz	r0, 8004f4c <_vfiprintf_r+0x78>
 8004f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f1c:	07dc      	lsls	r4, r3, #31
 8004f1e:	d50e      	bpl.n	8004f3e <_vfiprintf_r+0x6a>
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	b01d      	add	sp, #116	; 0x74
 8004f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <_vfiprintf_r+0x244>)
 8004f2c:	429d      	cmp	r5, r3
 8004f2e:	d101      	bne.n	8004f34 <_vfiprintf_r+0x60>
 8004f30:	68b5      	ldr	r5, [r6, #8]
 8004f32:	e7df      	b.n	8004ef4 <_vfiprintf_r+0x20>
 8004f34:	4b79      	ldr	r3, [pc, #484]	; (800511c <_vfiprintf_r+0x248>)
 8004f36:	429d      	cmp	r5, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68f5      	ldreq	r5, [r6, #12]
 8004f3c:	e7da      	b.n	8004ef4 <_vfiprintf_r+0x20>
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	0598      	lsls	r0, r3, #22
 8004f42:	d4ed      	bmi.n	8004f20 <_vfiprintf_r+0x4c>
 8004f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f46:	f7ff fe32 	bl	8004bae <__retarget_lock_release_recursive>
 8004f4a:	e7e9      	b.n	8004f20 <_vfiprintf_r+0x4c>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f50:	2320      	movs	r3, #32
 8004f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f5a:	2330      	movs	r3, #48	; 0x30
 8004f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005120 <_vfiprintf_r+0x24c>
 8004f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f64:	f04f 0901 	mov.w	r9, #1
 8004f68:	4623      	mov	r3, r4
 8004f6a:	469a      	mov	sl, r3
 8004f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f70:	b10a      	cbz	r2, 8004f76 <_vfiprintf_r+0xa2>
 8004f72:	2a25      	cmp	r2, #37	; 0x25
 8004f74:	d1f9      	bne.n	8004f6a <_vfiprintf_r+0x96>
 8004f76:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7a:	d00b      	beq.n	8004f94 <_vfiprintf_r+0xc0>
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ff93 	bl	8004eae <__sfputs_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f000 80aa 	beq.w	80050e2 <_vfiprintf_r+0x20e>
 8004f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f90:	445a      	add	r2, fp
 8004f92:	9209      	str	r2, [sp, #36]	; 0x24
 8004f94:	f89a 3000 	ldrb.w	r3, [sl]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80a2 	beq.w	80050e2 <_vfiprintf_r+0x20e>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa8:	f10a 0a01 	add.w	sl, sl, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb6:	4654      	mov	r4, sl
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbe:	4858      	ldr	r0, [pc, #352]	; (8005120 <_vfiprintf_r+0x24c>)
 8004fc0:	f7fb f906 	bl	80001d0 <memchr>
 8004fc4:	9a04      	ldr	r2, [sp, #16]
 8004fc6:	b9d8      	cbnz	r0, 8005000 <_vfiprintf_r+0x12c>
 8004fc8:	06d1      	lsls	r1, r2, #27
 8004fca:	bf44      	itt	mi
 8004fcc:	2320      	movmi	r3, #32
 8004fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd2:	0713      	lsls	r3, r2, #28
 8004fd4:	bf44      	itt	mi
 8004fd6:	232b      	movmi	r3, #43	; 0x2b
 8004fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe2:	d015      	beq.n	8005010 <_vfiprintf_r+0x13c>
 8004fe4:	9a07      	ldr	r2, [sp, #28]
 8004fe6:	4654      	mov	r4, sl
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f04f 0c0a 	mov.w	ip, #10
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff4:	3b30      	subs	r3, #48	; 0x30
 8004ff6:	2b09      	cmp	r3, #9
 8004ff8:	d94e      	bls.n	8005098 <_vfiprintf_r+0x1c4>
 8004ffa:	b1b0      	cbz	r0, 800502a <_vfiprintf_r+0x156>
 8004ffc:	9207      	str	r2, [sp, #28]
 8004ffe:	e014      	b.n	800502a <_vfiprintf_r+0x156>
 8005000:	eba0 0308 	sub.w	r3, r0, r8
 8005004:	fa09 f303 	lsl.w	r3, r9, r3
 8005008:	4313      	orrs	r3, r2
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	46a2      	mov	sl, r4
 800500e:	e7d2      	b.n	8004fb6 <_vfiprintf_r+0xe2>
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	9103      	str	r1, [sp, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	bfbb      	ittet	lt
 800501c:	425b      	neglt	r3, r3
 800501e:	f042 0202 	orrlt.w	r2, r2, #2
 8005022:	9307      	strge	r3, [sp, #28]
 8005024:	9307      	strlt	r3, [sp, #28]
 8005026:	bfb8      	it	lt
 8005028:	9204      	strlt	r2, [sp, #16]
 800502a:	7823      	ldrb	r3, [r4, #0]
 800502c:	2b2e      	cmp	r3, #46	; 0x2e
 800502e:	d10c      	bne.n	800504a <_vfiprintf_r+0x176>
 8005030:	7863      	ldrb	r3, [r4, #1]
 8005032:	2b2a      	cmp	r3, #42	; 0x2a
 8005034:	d135      	bne.n	80050a2 <_vfiprintf_r+0x1ce>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	9203      	str	r2, [sp, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfb8      	it	lt
 8005042:	f04f 33ff 	movlt.w	r3, #4294967295
 8005046:	3402      	adds	r4, #2
 8005048:	9305      	str	r3, [sp, #20]
 800504a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005130 <_vfiprintf_r+0x25c>
 800504e:	7821      	ldrb	r1, [r4, #0]
 8005050:	2203      	movs	r2, #3
 8005052:	4650      	mov	r0, sl
 8005054:	f7fb f8bc 	bl	80001d0 <memchr>
 8005058:	b140      	cbz	r0, 800506c <_vfiprintf_r+0x198>
 800505a:	2340      	movs	r3, #64	; 0x40
 800505c:	eba0 000a 	sub.w	r0, r0, sl
 8005060:	fa03 f000 	lsl.w	r0, r3, r0
 8005064:	9b04      	ldr	r3, [sp, #16]
 8005066:	4303      	orrs	r3, r0
 8005068:	3401      	adds	r4, #1
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005070:	482c      	ldr	r0, [pc, #176]	; (8005124 <_vfiprintf_r+0x250>)
 8005072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005076:	2206      	movs	r2, #6
 8005078:	f7fb f8aa 	bl	80001d0 <memchr>
 800507c:	2800      	cmp	r0, #0
 800507e:	d03f      	beq.n	8005100 <_vfiprintf_r+0x22c>
 8005080:	4b29      	ldr	r3, [pc, #164]	; (8005128 <_vfiprintf_r+0x254>)
 8005082:	bb1b      	cbnz	r3, 80050cc <_vfiprintf_r+0x1f8>
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	3307      	adds	r3, #7
 8005088:	f023 0307 	bic.w	r3, r3, #7
 800508c:	3308      	adds	r3, #8
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005092:	443b      	add	r3, r7
 8005094:	9309      	str	r3, [sp, #36]	; 0x24
 8005096:	e767      	b.n	8004f68 <_vfiprintf_r+0x94>
 8005098:	fb0c 3202 	mla	r2, ip, r2, r3
 800509c:	460c      	mov	r4, r1
 800509e:	2001      	movs	r0, #1
 80050a0:	e7a5      	b.n	8004fee <_vfiprintf_r+0x11a>
 80050a2:	2300      	movs	r3, #0
 80050a4:	3401      	adds	r4, #1
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f04f 0c0a 	mov.w	ip, #10
 80050ae:	4620      	mov	r0, r4
 80050b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b4:	3a30      	subs	r2, #48	; 0x30
 80050b6:	2a09      	cmp	r2, #9
 80050b8:	d903      	bls.n	80050c2 <_vfiprintf_r+0x1ee>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0c5      	beq.n	800504a <_vfiprintf_r+0x176>
 80050be:	9105      	str	r1, [sp, #20]
 80050c0:	e7c3      	b.n	800504a <_vfiprintf_r+0x176>
 80050c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c6:	4604      	mov	r4, r0
 80050c8:	2301      	movs	r3, #1
 80050ca:	e7f0      	b.n	80050ae <_vfiprintf_r+0x1da>
 80050cc:	ab03      	add	r3, sp, #12
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	462a      	mov	r2, r5
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <_vfiprintf_r+0x258>)
 80050d4:	a904      	add	r1, sp, #16
 80050d6:	4630      	mov	r0, r6
 80050d8:	f3af 8000 	nop.w
 80050dc:	4607      	mov	r7, r0
 80050de:	1c78      	adds	r0, r7, #1
 80050e0:	d1d6      	bne.n	8005090 <_vfiprintf_r+0x1bc>
 80050e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	d405      	bmi.n	80050f4 <_vfiprintf_r+0x220>
 80050e8:	89ab      	ldrh	r3, [r5, #12]
 80050ea:	059a      	lsls	r2, r3, #22
 80050ec:	d402      	bmi.n	80050f4 <_vfiprintf_r+0x220>
 80050ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f0:	f7ff fd5d 	bl	8004bae <__retarget_lock_release_recursive>
 80050f4:	89ab      	ldrh	r3, [r5, #12]
 80050f6:	065b      	lsls	r3, r3, #25
 80050f8:	f53f af12 	bmi.w	8004f20 <_vfiprintf_r+0x4c>
 80050fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050fe:	e711      	b.n	8004f24 <_vfiprintf_r+0x50>
 8005100:	ab03      	add	r3, sp, #12
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	462a      	mov	r2, r5
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <_vfiprintf_r+0x258>)
 8005108:	a904      	add	r1, sp, #16
 800510a:	4630      	mov	r0, r6
 800510c:	f000 f880 	bl	8005210 <_printf_i>
 8005110:	e7e4      	b.n	80050dc <_vfiprintf_r+0x208>
 8005112:	bf00      	nop
 8005114:	08005d8c 	.word	0x08005d8c
 8005118:	08005dac 	.word	0x08005dac
 800511c:	08005d6c 	.word	0x08005d6c
 8005120:	08005dcc 	.word	0x08005dcc
 8005124:	08005dd6 	.word	0x08005dd6
 8005128:	00000000 	.word	0x00000000
 800512c:	08004eaf 	.word	0x08004eaf
 8005130:	08005dd2 	.word	0x08005dd2

08005134 <_printf_common>:
 8005134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	4616      	mov	r6, r2
 800513a:	4699      	mov	r9, r3
 800513c:	688a      	ldr	r2, [r1, #8]
 800513e:	690b      	ldr	r3, [r1, #16]
 8005140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005144:	4293      	cmp	r3, r2
 8005146:	bfb8      	it	lt
 8005148:	4613      	movlt	r3, r2
 800514a:	6033      	str	r3, [r6, #0]
 800514c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005150:	4607      	mov	r7, r0
 8005152:	460c      	mov	r4, r1
 8005154:	b10a      	cbz	r2, 800515a <_printf_common+0x26>
 8005156:	3301      	adds	r3, #1
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	0699      	lsls	r1, r3, #26
 800515e:	bf42      	ittt	mi
 8005160:	6833      	ldrmi	r3, [r6, #0]
 8005162:	3302      	addmi	r3, #2
 8005164:	6033      	strmi	r3, [r6, #0]
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	f015 0506 	ands.w	r5, r5, #6
 800516c:	d106      	bne.n	800517c <_printf_common+0x48>
 800516e:	f104 0a19 	add.w	sl, r4, #25
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	6832      	ldr	r2, [r6, #0]
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	42ab      	cmp	r3, r5
 800517a:	dc26      	bgt.n	80051ca <_printf_common+0x96>
 800517c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005180:	1e13      	subs	r3, r2, #0
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	2301      	movne	r3, #1
 8005188:	0692      	lsls	r2, r2, #26
 800518a:	d42b      	bmi.n	80051e4 <_printf_common+0xb0>
 800518c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d01e      	beq.n	80051d8 <_printf_common+0xa4>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	68e5      	ldr	r5, [r4, #12]
 800519e:	6832      	ldr	r2, [r6, #0]
 80051a0:	f003 0306 	and.w	r3, r3, #6
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	bf08      	it	eq
 80051a8:	1aad      	subeq	r5, r5, r2
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	bf0c      	ite	eq
 80051b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b4:	2500      	movne	r5, #0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	bfc4      	itt	gt
 80051ba:	1a9b      	subgt	r3, r3, r2
 80051bc:	18ed      	addgt	r5, r5, r3
 80051be:	2600      	movs	r6, #0
 80051c0:	341a      	adds	r4, #26
 80051c2:	42b5      	cmp	r5, r6
 80051c4:	d11a      	bne.n	80051fc <_printf_common+0xc8>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e008      	b.n	80051dc <_printf_common+0xa8>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4652      	mov	r2, sl
 80051ce:	4649      	mov	r1, r9
 80051d0:	4638      	mov	r0, r7
 80051d2:	47c0      	blx	r8
 80051d4:	3001      	adds	r0, #1
 80051d6:	d103      	bne.n	80051e0 <_printf_common+0xac>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e0:	3501      	adds	r5, #1
 80051e2:	e7c6      	b.n	8005172 <_printf_common+0x3e>
 80051e4:	18e1      	adds	r1, r4, r3
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	2030      	movs	r0, #48	; 0x30
 80051ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ee:	4422      	add	r2, r4
 80051f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f8:	3302      	adds	r3, #2
 80051fa:	e7c7      	b.n	800518c <_printf_common+0x58>
 80051fc:	2301      	movs	r3, #1
 80051fe:	4622      	mov	r2, r4
 8005200:	4649      	mov	r1, r9
 8005202:	4638      	mov	r0, r7
 8005204:	47c0      	blx	r8
 8005206:	3001      	adds	r0, #1
 8005208:	d0e6      	beq.n	80051d8 <_printf_common+0xa4>
 800520a:	3601      	adds	r6, #1
 800520c:	e7d9      	b.n	80051c2 <_printf_common+0x8e>
	...

08005210 <_printf_i>:
 8005210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	7e0f      	ldrb	r7, [r1, #24]
 8005216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005218:	2f78      	cmp	r7, #120	; 0x78
 800521a:	4691      	mov	r9, r2
 800521c:	4680      	mov	r8, r0
 800521e:	460c      	mov	r4, r1
 8005220:	469a      	mov	sl, r3
 8005222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005226:	d807      	bhi.n	8005238 <_printf_i+0x28>
 8005228:	2f62      	cmp	r7, #98	; 0x62
 800522a:	d80a      	bhi.n	8005242 <_printf_i+0x32>
 800522c:	2f00      	cmp	r7, #0
 800522e:	f000 80d8 	beq.w	80053e2 <_printf_i+0x1d2>
 8005232:	2f58      	cmp	r7, #88	; 0x58
 8005234:	f000 80a3 	beq.w	800537e <_printf_i+0x16e>
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005240:	e03a      	b.n	80052b8 <_printf_i+0xa8>
 8005242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005246:	2b15      	cmp	r3, #21
 8005248:	d8f6      	bhi.n	8005238 <_printf_i+0x28>
 800524a:	a101      	add	r1, pc, #4	; (adr r1, 8005250 <_printf_i+0x40>)
 800524c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052bd 	.word	0x080052bd
 8005258:	08005239 	.word	0x08005239
 800525c:	08005239 	.word	0x08005239
 8005260:	08005239 	.word	0x08005239
 8005264:	08005239 	.word	0x08005239
 8005268:	080052bd 	.word	0x080052bd
 800526c:	08005239 	.word	0x08005239
 8005270:	08005239 	.word	0x08005239
 8005274:	08005239 	.word	0x08005239
 8005278:	08005239 	.word	0x08005239
 800527c:	080053c9 	.word	0x080053c9
 8005280:	080052ed 	.word	0x080052ed
 8005284:	080053ab 	.word	0x080053ab
 8005288:	08005239 	.word	0x08005239
 800528c:	08005239 	.word	0x08005239
 8005290:	080053eb 	.word	0x080053eb
 8005294:	08005239 	.word	0x08005239
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005239 	.word	0x08005239
 80052a0:	08005239 	.word	0x08005239
 80052a4:	080053b3 	.word	0x080053b3
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	602a      	str	r2, [r5, #0]
 80052b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0a3      	b.n	8005404 <_printf_i+0x1f4>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	6829      	ldr	r1, [r5, #0]
 80052c0:	0606      	lsls	r6, r0, #24
 80052c2:	f101 0304 	add.w	r3, r1, #4
 80052c6:	d50a      	bpl.n	80052de <_printf_i+0xce>
 80052c8:	680e      	ldr	r6, [r1, #0]
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	2e00      	cmp	r6, #0
 80052ce:	da03      	bge.n	80052d8 <_printf_i+0xc8>
 80052d0:	232d      	movs	r3, #45	; 0x2d
 80052d2:	4276      	negs	r6, r6
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	485e      	ldr	r0, [pc, #376]	; (8005454 <_printf_i+0x244>)
 80052da:	230a      	movs	r3, #10
 80052dc:	e019      	b.n	8005312 <_printf_i+0x102>
 80052de:	680e      	ldr	r6, [r1, #0]
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052e6:	bf18      	it	ne
 80052e8:	b236      	sxthne	r6, r6
 80052ea:	e7ef      	b.n	80052cc <_printf_i+0xbc>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	1d19      	adds	r1, r3, #4
 80052f2:	6029      	str	r1, [r5, #0]
 80052f4:	0601      	lsls	r1, r0, #24
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0xec>
 80052f8:	681e      	ldr	r6, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0xf2>
 80052fc:	0646      	lsls	r6, r0, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0xe8>
 8005300:	881e      	ldrh	r6, [r3, #0]
 8005302:	4854      	ldr	r0, [pc, #336]	; (8005454 <_printf_i+0x244>)
 8005304:	2f6f      	cmp	r7, #111	; 0x6f
 8005306:	bf0c      	ite	eq
 8005308:	2308      	moveq	r3, #8
 800530a:	230a      	movne	r3, #10
 800530c:	2100      	movs	r1, #0
 800530e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005312:	6865      	ldr	r5, [r4, #4]
 8005314:	60a5      	str	r5, [r4, #8]
 8005316:	2d00      	cmp	r5, #0
 8005318:	bfa2      	ittt	ge
 800531a:	6821      	ldrge	r1, [r4, #0]
 800531c:	f021 0104 	bicge.w	r1, r1, #4
 8005320:	6021      	strge	r1, [r4, #0]
 8005322:	b90e      	cbnz	r6, 8005328 <_printf_i+0x118>
 8005324:	2d00      	cmp	r5, #0
 8005326:	d04d      	beq.n	80053c4 <_printf_i+0x1b4>
 8005328:	4615      	mov	r5, r2
 800532a:	fbb6 f1f3 	udiv	r1, r6, r3
 800532e:	fb03 6711 	mls	r7, r3, r1, r6
 8005332:	5dc7      	ldrb	r7, [r0, r7]
 8005334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005338:	4637      	mov	r7, r6
 800533a:	42bb      	cmp	r3, r7
 800533c:	460e      	mov	r6, r1
 800533e:	d9f4      	bls.n	800532a <_printf_i+0x11a>
 8005340:	2b08      	cmp	r3, #8
 8005342:	d10b      	bne.n	800535c <_printf_i+0x14c>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07de      	lsls	r6, r3, #31
 8005348:	d508      	bpl.n	800535c <_printf_i+0x14c>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	6861      	ldr	r1, [r4, #4]
 800534e:	4299      	cmp	r1, r3
 8005350:	bfde      	ittt	le
 8005352:	2330      	movle	r3, #48	; 0x30
 8005354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800535c:	1b52      	subs	r2, r2, r5
 800535e:	6122      	str	r2, [r4, #16]
 8005360:	f8cd a000 	str.w	sl, [sp]
 8005364:	464b      	mov	r3, r9
 8005366:	aa03      	add	r2, sp, #12
 8005368:	4621      	mov	r1, r4
 800536a:	4640      	mov	r0, r8
 800536c:	f7ff fee2 	bl	8005134 <_printf_common>
 8005370:	3001      	adds	r0, #1
 8005372:	d14c      	bne.n	800540e <_printf_i+0x1fe>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	b004      	add	sp, #16
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	4835      	ldr	r0, [pc, #212]	; (8005454 <_printf_i+0x244>)
 8005380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005384:	6829      	ldr	r1, [r5, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	f851 6b04 	ldr.w	r6, [r1], #4
 800538c:	6029      	str	r1, [r5, #0]
 800538e:	061d      	lsls	r5, r3, #24
 8005390:	d514      	bpl.n	80053bc <_printf_i+0x1ac>
 8005392:	07df      	lsls	r7, r3, #31
 8005394:	bf44      	itt	mi
 8005396:	f043 0320 	orrmi.w	r3, r3, #32
 800539a:	6023      	strmi	r3, [r4, #0]
 800539c:	b91e      	cbnz	r6, 80053a6 <_printf_i+0x196>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2310      	movs	r3, #16
 80053a8:	e7b0      	b.n	800530c <_printf_i+0xfc>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	2378      	movs	r3, #120	; 0x78
 80053b4:	4828      	ldr	r0, [pc, #160]	; (8005458 <_printf_i+0x248>)
 80053b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ba:	e7e3      	b.n	8005384 <_printf_i+0x174>
 80053bc:	0659      	lsls	r1, r3, #25
 80053be:	bf48      	it	mi
 80053c0:	b2b6      	uxthmi	r6, r6
 80053c2:	e7e6      	b.n	8005392 <_printf_i+0x182>
 80053c4:	4615      	mov	r5, r2
 80053c6:	e7bb      	b.n	8005340 <_printf_i+0x130>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6826      	ldr	r6, [r4, #0]
 80053cc:	6961      	ldr	r1, [r4, #20]
 80053ce:	1d18      	adds	r0, r3, #4
 80053d0:	6028      	str	r0, [r5, #0]
 80053d2:	0635      	lsls	r5, r6, #24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0x1cc>
 80053d8:	6019      	str	r1, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0x1d2>
 80053dc:	0670      	lsls	r0, r6, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0x1c8>
 80053e0:	8019      	strh	r1, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	4615      	mov	r5, r2
 80053e8:	e7ba      	b.n	8005360 <_printf_i+0x150>
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	602a      	str	r2, [r5, #0]
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4628      	mov	r0, r5
 80053f8:	f7fa feea 	bl	80001d0 <memchr>
 80053fc:	b108      	cbz	r0, 8005402 <_printf_i+0x1f2>
 80053fe:	1b40      	subs	r0, r0, r5
 8005400:	6060      	str	r0, [r4, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	2300      	movs	r3, #0
 8005408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540c:	e7a8      	b.n	8005360 <_printf_i+0x150>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	462a      	mov	r2, r5
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d0ab      	beq.n	8005374 <_printf_i+0x164>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079b      	lsls	r3, r3, #30
 8005420:	d413      	bmi.n	800544a <_printf_i+0x23a>
 8005422:	68e0      	ldr	r0, [r4, #12]
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	4298      	cmp	r0, r3
 8005428:	bfb8      	it	lt
 800542a:	4618      	movlt	r0, r3
 800542c:	e7a4      	b.n	8005378 <_printf_i+0x168>
 800542e:	2301      	movs	r3, #1
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d09b      	beq.n	8005374 <_printf_i+0x164>
 800543c:	3501      	adds	r5, #1
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	9903      	ldr	r1, [sp, #12]
 8005442:	1a5b      	subs	r3, r3, r1
 8005444:	42ab      	cmp	r3, r5
 8005446:	dcf2      	bgt.n	800542e <_printf_i+0x21e>
 8005448:	e7eb      	b.n	8005422 <_printf_i+0x212>
 800544a:	2500      	movs	r5, #0
 800544c:	f104 0619 	add.w	r6, r4, #25
 8005450:	e7f5      	b.n	800543e <_printf_i+0x22e>
 8005452:	bf00      	nop
 8005454:	08005ddd 	.word	0x08005ddd
 8005458:	08005dee 	.word	0x08005dee

0800545c <__sread>:
 800545c:	b510      	push	{r4, lr}
 800545e:	460c      	mov	r4, r1
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	f000 fab2 	bl	80059cc <_read_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	bfab      	itete	ge
 800546c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800546e:	89a3      	ldrhlt	r3, [r4, #12]
 8005470:	181b      	addge	r3, r3, r0
 8005472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005476:	bfac      	ite	ge
 8005478:	6563      	strge	r3, [r4, #84]	; 0x54
 800547a:	81a3      	strhlt	r3, [r4, #12]
 800547c:	bd10      	pop	{r4, pc}

0800547e <__swrite>:
 800547e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005482:	461f      	mov	r7, r3
 8005484:	898b      	ldrh	r3, [r1, #12]
 8005486:	05db      	lsls	r3, r3, #23
 8005488:	4605      	mov	r5, r0
 800548a:	460c      	mov	r4, r1
 800548c:	4616      	mov	r6, r2
 800548e:	d505      	bpl.n	800549c <__swrite+0x1e>
 8005490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005494:	2302      	movs	r3, #2
 8005496:	2200      	movs	r2, #0
 8005498:	f000 f9c8 	bl	800582c <_lseek_r>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	4632      	mov	r2, r6
 80054aa:	463b      	mov	r3, r7
 80054ac:	4628      	mov	r0, r5
 80054ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b2:	f000 b869 	b.w	8005588 <_write_r>

080054b6 <__sseek>:
 80054b6:	b510      	push	{r4, lr}
 80054b8:	460c      	mov	r4, r1
 80054ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054be:	f000 f9b5 	bl	800582c <_lseek_r>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	bf15      	itete	ne
 80054c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054d2:	81a3      	strheq	r3, [r4, #12]
 80054d4:	bf18      	it	ne
 80054d6:	81a3      	strhne	r3, [r4, #12]
 80054d8:	bd10      	pop	{r4, pc}

080054da <__sclose>:
 80054da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054de:	f000 b8d3 	b.w	8005688 <_close_r>
	...

080054e4 <__swbuf_r>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	460e      	mov	r6, r1
 80054e8:	4614      	mov	r4, r2
 80054ea:	4605      	mov	r5, r0
 80054ec:	b118      	cbz	r0, 80054f6 <__swbuf_r+0x12>
 80054ee:	6983      	ldr	r3, [r0, #24]
 80054f0:	b90b      	cbnz	r3, 80054f6 <__swbuf_r+0x12>
 80054f2:	f7ff fabd 	bl	8004a70 <__sinit>
 80054f6:	4b21      	ldr	r3, [pc, #132]	; (800557c <__swbuf_r+0x98>)
 80054f8:	429c      	cmp	r4, r3
 80054fa:	d12b      	bne.n	8005554 <__swbuf_r+0x70>
 80054fc:	686c      	ldr	r4, [r5, #4]
 80054fe:	69a3      	ldr	r3, [r4, #24]
 8005500:	60a3      	str	r3, [r4, #8]
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	071a      	lsls	r2, r3, #28
 8005506:	d52f      	bpl.n	8005568 <__swbuf_r+0x84>
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	b36b      	cbz	r3, 8005568 <__swbuf_r+0x84>
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	6820      	ldr	r0, [r4, #0]
 8005510:	1ac0      	subs	r0, r0, r3
 8005512:	6963      	ldr	r3, [r4, #20]
 8005514:	b2f6      	uxtb	r6, r6
 8005516:	4283      	cmp	r3, r0
 8005518:	4637      	mov	r7, r6
 800551a:	dc04      	bgt.n	8005526 <__swbuf_r+0x42>
 800551c:	4621      	mov	r1, r4
 800551e:	4628      	mov	r0, r5
 8005520:	f000 f948 	bl	80057b4 <_fflush_r>
 8005524:	bb30      	cbnz	r0, 8005574 <__swbuf_r+0x90>
 8005526:	68a3      	ldr	r3, [r4, #8]
 8005528:	3b01      	subs	r3, #1
 800552a:	60a3      	str	r3, [r4, #8]
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	6022      	str	r2, [r4, #0]
 8005532:	701e      	strb	r6, [r3, #0]
 8005534:	6963      	ldr	r3, [r4, #20]
 8005536:	3001      	adds	r0, #1
 8005538:	4283      	cmp	r3, r0
 800553a:	d004      	beq.n	8005546 <__swbuf_r+0x62>
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	07db      	lsls	r3, r3, #31
 8005540:	d506      	bpl.n	8005550 <__swbuf_r+0x6c>
 8005542:	2e0a      	cmp	r6, #10
 8005544:	d104      	bne.n	8005550 <__swbuf_r+0x6c>
 8005546:	4621      	mov	r1, r4
 8005548:	4628      	mov	r0, r5
 800554a:	f000 f933 	bl	80057b4 <_fflush_r>
 800554e:	b988      	cbnz	r0, 8005574 <__swbuf_r+0x90>
 8005550:	4638      	mov	r0, r7
 8005552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <__swbuf_r+0x9c>)
 8005556:	429c      	cmp	r4, r3
 8005558:	d101      	bne.n	800555e <__swbuf_r+0x7a>
 800555a:	68ac      	ldr	r4, [r5, #8]
 800555c:	e7cf      	b.n	80054fe <__swbuf_r+0x1a>
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <__swbuf_r+0xa0>)
 8005560:	429c      	cmp	r4, r3
 8005562:	bf08      	it	eq
 8005564:	68ec      	ldreq	r4, [r5, #12]
 8005566:	e7ca      	b.n	80054fe <__swbuf_r+0x1a>
 8005568:	4621      	mov	r1, r4
 800556a:	4628      	mov	r0, r5
 800556c:	f000 f81e 	bl	80055ac <__swsetup_r>
 8005570:	2800      	cmp	r0, #0
 8005572:	d0cb      	beq.n	800550c <__swbuf_r+0x28>
 8005574:	f04f 37ff 	mov.w	r7, #4294967295
 8005578:	e7ea      	b.n	8005550 <__swbuf_r+0x6c>
 800557a:	bf00      	nop
 800557c:	08005d8c 	.word	0x08005d8c
 8005580:	08005dac 	.word	0x08005dac
 8005584:	08005d6c 	.word	0x08005d6c

08005588 <_write_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d07      	ldr	r5, [pc, #28]	; (80055a8 <_write_r+0x20>)
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	2200      	movs	r2, #0
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f7fb f813 	bl	80005c2 <_write>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_write_r+0x1e>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_write_r+0x1e>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	200001d4 	.word	0x200001d4

080055ac <__swsetup_r>:
 80055ac:	4b32      	ldr	r3, [pc, #200]	; (8005678 <__swsetup_r+0xcc>)
 80055ae:	b570      	push	{r4, r5, r6, lr}
 80055b0:	681d      	ldr	r5, [r3, #0]
 80055b2:	4606      	mov	r6, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	b125      	cbz	r5, 80055c2 <__swsetup_r+0x16>
 80055b8:	69ab      	ldr	r3, [r5, #24]
 80055ba:	b913      	cbnz	r3, 80055c2 <__swsetup_r+0x16>
 80055bc:	4628      	mov	r0, r5
 80055be:	f7ff fa57 	bl	8004a70 <__sinit>
 80055c2:	4b2e      	ldr	r3, [pc, #184]	; (800567c <__swsetup_r+0xd0>)
 80055c4:	429c      	cmp	r4, r3
 80055c6:	d10f      	bne.n	80055e8 <__swsetup_r+0x3c>
 80055c8:	686c      	ldr	r4, [r5, #4]
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055d0:	0719      	lsls	r1, r3, #28
 80055d2:	d42c      	bmi.n	800562e <__swsetup_r+0x82>
 80055d4:	06dd      	lsls	r5, r3, #27
 80055d6:	d411      	bmi.n	80055fc <__swsetup_r+0x50>
 80055d8:	2309      	movs	r3, #9
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055e0:	81a3      	strh	r3, [r4, #12]
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295
 80055e6:	e03e      	b.n	8005666 <__swsetup_r+0xba>
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <__swsetup_r+0xd4>)
 80055ea:	429c      	cmp	r4, r3
 80055ec:	d101      	bne.n	80055f2 <__swsetup_r+0x46>
 80055ee:	68ac      	ldr	r4, [r5, #8]
 80055f0:	e7eb      	b.n	80055ca <__swsetup_r+0x1e>
 80055f2:	4b24      	ldr	r3, [pc, #144]	; (8005684 <__swsetup_r+0xd8>)
 80055f4:	429c      	cmp	r4, r3
 80055f6:	bf08      	it	eq
 80055f8:	68ec      	ldreq	r4, [r5, #12]
 80055fa:	e7e6      	b.n	80055ca <__swsetup_r+0x1e>
 80055fc:	0758      	lsls	r0, r3, #29
 80055fe:	d512      	bpl.n	8005626 <__swsetup_r+0x7a>
 8005600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005602:	b141      	cbz	r1, 8005616 <__swsetup_r+0x6a>
 8005604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005608:	4299      	cmp	r1, r3
 800560a:	d002      	beq.n	8005612 <__swsetup_r+0x66>
 800560c:	4630      	mov	r0, r6
 800560e:	f7ff f8af 	bl	8004770 <_free_r>
 8005612:	2300      	movs	r3, #0
 8005614:	6363      	str	r3, [r4, #52]	; 0x34
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	2300      	movs	r3, #0
 8005620:	6063      	str	r3, [r4, #4]
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	f043 0308 	orr.w	r3, r3, #8
 800562c:	81a3      	strh	r3, [r4, #12]
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	b94b      	cbnz	r3, 8005646 <__swsetup_r+0x9a>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800563c:	d003      	beq.n	8005646 <__swsetup_r+0x9a>
 800563e:	4621      	mov	r1, r4
 8005640:	4630      	mov	r0, r6
 8005642:	f000 f92b 	bl	800589c <__smakebuf_r>
 8005646:	89a0      	ldrh	r0, [r4, #12]
 8005648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800564c:	f010 0301 	ands.w	r3, r0, #1
 8005650:	d00a      	beq.n	8005668 <__swsetup_r+0xbc>
 8005652:	2300      	movs	r3, #0
 8005654:	60a3      	str	r3, [r4, #8]
 8005656:	6963      	ldr	r3, [r4, #20]
 8005658:	425b      	negs	r3, r3
 800565a:	61a3      	str	r3, [r4, #24]
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	b943      	cbnz	r3, 8005672 <__swsetup_r+0xc6>
 8005660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005664:	d1ba      	bne.n	80055dc <__swsetup_r+0x30>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	0781      	lsls	r1, r0, #30
 800566a:	bf58      	it	pl
 800566c:	6963      	ldrpl	r3, [r4, #20]
 800566e:	60a3      	str	r3, [r4, #8]
 8005670:	e7f4      	b.n	800565c <__swsetup_r+0xb0>
 8005672:	2000      	movs	r0, #0
 8005674:	e7f7      	b.n	8005666 <__swsetup_r+0xba>
 8005676:	bf00      	nop
 8005678:	2000000c 	.word	0x2000000c
 800567c:	08005d8c 	.word	0x08005d8c
 8005680:	08005dac 	.word	0x08005dac
 8005684:	08005d6c 	.word	0x08005d6c

08005688 <_close_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4d06      	ldr	r5, [pc, #24]	; (80056a4 <_close_r+0x1c>)
 800568c:	2300      	movs	r3, #0
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	f7fb fc7f 	bl	8000f96 <_close>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_close_r+0x1a>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_close_r+0x1a>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	200001d4 	.word	0x200001d4

080056a8 <__sflush_r>:
 80056a8:	898a      	ldrh	r2, [r1, #12]
 80056aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ae:	4605      	mov	r5, r0
 80056b0:	0710      	lsls	r0, r2, #28
 80056b2:	460c      	mov	r4, r1
 80056b4:	d458      	bmi.n	8005768 <__sflush_r+0xc0>
 80056b6:	684b      	ldr	r3, [r1, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	dc05      	bgt.n	80056c8 <__sflush_r+0x20>
 80056bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dc02      	bgt.n	80056c8 <__sflush_r+0x20>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	d0f9      	beq.n	80056c2 <__sflush_r+0x1a>
 80056ce:	2300      	movs	r3, #0
 80056d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056d4:	682f      	ldr	r7, [r5, #0]
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	d032      	beq.n	8005740 <__sflush_r+0x98>
 80056da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	075a      	lsls	r2, r3, #29
 80056e0:	d505      	bpl.n	80056ee <__sflush_r+0x46>
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	1ac0      	subs	r0, r0, r3
 80056e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056e8:	b10b      	cbz	r3, 80056ee <__sflush_r+0x46>
 80056ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ec:	1ac0      	subs	r0, r0, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	4602      	mov	r2, r0
 80056f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056f4:	6a21      	ldr	r1, [r4, #32]
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b0      	blx	r6
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	d106      	bne.n	800570e <__sflush_r+0x66>
 8005700:	6829      	ldr	r1, [r5, #0]
 8005702:	291d      	cmp	r1, #29
 8005704:	d82c      	bhi.n	8005760 <__sflush_r+0xb8>
 8005706:	4a2a      	ldr	r2, [pc, #168]	; (80057b0 <__sflush_r+0x108>)
 8005708:	40ca      	lsrs	r2, r1
 800570a:	07d6      	lsls	r6, r2, #31
 800570c:	d528      	bpl.n	8005760 <__sflush_r+0xb8>
 800570e:	2200      	movs	r2, #0
 8005710:	6062      	str	r2, [r4, #4]
 8005712:	04d9      	lsls	r1, r3, #19
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	6022      	str	r2, [r4, #0]
 8005718:	d504      	bpl.n	8005724 <__sflush_r+0x7c>
 800571a:	1c42      	adds	r2, r0, #1
 800571c:	d101      	bne.n	8005722 <__sflush_r+0x7a>
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	b903      	cbnz	r3, 8005724 <__sflush_r+0x7c>
 8005722:	6560      	str	r0, [r4, #84]	; 0x54
 8005724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005726:	602f      	str	r7, [r5, #0]
 8005728:	2900      	cmp	r1, #0
 800572a:	d0ca      	beq.n	80056c2 <__sflush_r+0x1a>
 800572c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005730:	4299      	cmp	r1, r3
 8005732:	d002      	beq.n	800573a <__sflush_r+0x92>
 8005734:	4628      	mov	r0, r5
 8005736:	f7ff f81b 	bl	8004770 <_free_r>
 800573a:	2000      	movs	r0, #0
 800573c:	6360      	str	r0, [r4, #52]	; 0x34
 800573e:	e7c1      	b.n	80056c4 <__sflush_r+0x1c>
 8005740:	6a21      	ldr	r1, [r4, #32]
 8005742:	2301      	movs	r3, #1
 8005744:	4628      	mov	r0, r5
 8005746:	47b0      	blx	r6
 8005748:	1c41      	adds	r1, r0, #1
 800574a:	d1c7      	bne.n	80056dc <__sflush_r+0x34>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d0c4      	beq.n	80056dc <__sflush_r+0x34>
 8005752:	2b1d      	cmp	r3, #29
 8005754:	d001      	beq.n	800575a <__sflush_r+0xb2>
 8005756:	2b16      	cmp	r3, #22
 8005758:	d101      	bne.n	800575e <__sflush_r+0xb6>
 800575a:	602f      	str	r7, [r5, #0]
 800575c:	e7b1      	b.n	80056c2 <__sflush_r+0x1a>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	e7ad      	b.n	80056c4 <__sflush_r+0x1c>
 8005768:	690f      	ldr	r7, [r1, #16]
 800576a:	2f00      	cmp	r7, #0
 800576c:	d0a9      	beq.n	80056c2 <__sflush_r+0x1a>
 800576e:	0793      	lsls	r3, r2, #30
 8005770:	680e      	ldr	r6, [r1, #0]
 8005772:	bf08      	it	eq
 8005774:	694b      	ldreq	r3, [r1, #20]
 8005776:	600f      	str	r7, [r1, #0]
 8005778:	bf18      	it	ne
 800577a:	2300      	movne	r3, #0
 800577c:	eba6 0807 	sub.w	r8, r6, r7
 8005780:	608b      	str	r3, [r1, #8]
 8005782:	f1b8 0f00 	cmp.w	r8, #0
 8005786:	dd9c      	ble.n	80056c2 <__sflush_r+0x1a>
 8005788:	6a21      	ldr	r1, [r4, #32]
 800578a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800578c:	4643      	mov	r3, r8
 800578e:	463a      	mov	r2, r7
 8005790:	4628      	mov	r0, r5
 8005792:	47b0      	blx	r6
 8005794:	2800      	cmp	r0, #0
 8005796:	dc06      	bgt.n	80057a6 <__sflush_r+0xfe>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	e78e      	b.n	80056c4 <__sflush_r+0x1c>
 80057a6:	4407      	add	r7, r0
 80057a8:	eba8 0800 	sub.w	r8, r8, r0
 80057ac:	e7e9      	b.n	8005782 <__sflush_r+0xda>
 80057ae:	bf00      	nop
 80057b0:	20400001 	.word	0x20400001

080057b4 <_fflush_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	690b      	ldr	r3, [r1, #16]
 80057b8:	4605      	mov	r5, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	b913      	cbnz	r3, 80057c4 <_fflush_r+0x10>
 80057be:	2500      	movs	r5, #0
 80057c0:	4628      	mov	r0, r5
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	b118      	cbz	r0, 80057ce <_fflush_r+0x1a>
 80057c6:	6983      	ldr	r3, [r0, #24]
 80057c8:	b90b      	cbnz	r3, 80057ce <_fflush_r+0x1a>
 80057ca:	f7ff f951 	bl	8004a70 <__sinit>
 80057ce:	4b14      	ldr	r3, [pc, #80]	; (8005820 <_fflush_r+0x6c>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	d11b      	bne.n	800580c <_fflush_r+0x58>
 80057d4:	686c      	ldr	r4, [r5, #4]
 80057d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0ef      	beq.n	80057be <_fflush_r+0xa>
 80057de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80057e0:	07d0      	lsls	r0, r2, #31
 80057e2:	d404      	bmi.n	80057ee <_fflush_r+0x3a>
 80057e4:	0599      	lsls	r1, r3, #22
 80057e6:	d402      	bmi.n	80057ee <_fflush_r+0x3a>
 80057e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ea:	f7ff f9df 	bl	8004bac <__retarget_lock_acquire_recursive>
 80057ee:	4628      	mov	r0, r5
 80057f0:	4621      	mov	r1, r4
 80057f2:	f7ff ff59 	bl	80056a8 <__sflush_r>
 80057f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057f8:	07da      	lsls	r2, r3, #31
 80057fa:	4605      	mov	r5, r0
 80057fc:	d4e0      	bmi.n	80057c0 <_fflush_r+0xc>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	059b      	lsls	r3, r3, #22
 8005802:	d4dd      	bmi.n	80057c0 <_fflush_r+0xc>
 8005804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005806:	f7ff f9d2 	bl	8004bae <__retarget_lock_release_recursive>
 800580a:	e7d9      	b.n	80057c0 <_fflush_r+0xc>
 800580c:	4b05      	ldr	r3, [pc, #20]	; (8005824 <_fflush_r+0x70>)
 800580e:	429c      	cmp	r4, r3
 8005810:	d101      	bne.n	8005816 <_fflush_r+0x62>
 8005812:	68ac      	ldr	r4, [r5, #8]
 8005814:	e7df      	b.n	80057d6 <_fflush_r+0x22>
 8005816:	4b04      	ldr	r3, [pc, #16]	; (8005828 <_fflush_r+0x74>)
 8005818:	429c      	cmp	r4, r3
 800581a:	bf08      	it	eq
 800581c:	68ec      	ldreq	r4, [r5, #12]
 800581e:	e7da      	b.n	80057d6 <_fflush_r+0x22>
 8005820:	08005d8c 	.word	0x08005d8c
 8005824:	08005dac 	.word	0x08005dac
 8005828:	08005d6c 	.word	0x08005d6c

0800582c <_lseek_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4d07      	ldr	r5, [pc, #28]	; (800584c <_lseek_r+0x20>)
 8005830:	4604      	mov	r4, r0
 8005832:	4608      	mov	r0, r1
 8005834:	4611      	mov	r1, r2
 8005836:	2200      	movs	r2, #0
 8005838:	602a      	str	r2, [r5, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f7fb fbd2 	bl	8000fe4 <_lseek>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_lseek_r+0x1e>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_lseek_r+0x1e>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	200001d4 	.word	0x200001d4

08005850 <__swhatbuf_r>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	460e      	mov	r6, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	2900      	cmp	r1, #0
 800585a:	b096      	sub	sp, #88	; 0x58
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	da08      	bge.n	8005874 <__swhatbuf_r+0x24>
 8005862:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	602a      	str	r2, [r5, #0]
 800586a:	061a      	lsls	r2, r3, #24
 800586c:	d410      	bmi.n	8005890 <__swhatbuf_r+0x40>
 800586e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005872:	e00e      	b.n	8005892 <__swhatbuf_r+0x42>
 8005874:	466a      	mov	r2, sp
 8005876:	f000 f8bb 	bl	80059f0 <_fstat_r>
 800587a:	2800      	cmp	r0, #0
 800587c:	dbf1      	blt.n	8005862 <__swhatbuf_r+0x12>
 800587e:	9a01      	ldr	r2, [sp, #4]
 8005880:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005884:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005888:	425a      	negs	r2, r3
 800588a:	415a      	adcs	r2, r3
 800588c:	602a      	str	r2, [r5, #0]
 800588e:	e7ee      	b.n	800586e <__swhatbuf_r+0x1e>
 8005890:	2340      	movs	r3, #64	; 0x40
 8005892:	2000      	movs	r0, #0
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	b016      	add	sp, #88	; 0x58
 8005898:	bd70      	pop	{r4, r5, r6, pc}
	...

0800589c <__smakebuf_r>:
 800589c:	898b      	ldrh	r3, [r1, #12]
 800589e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058a0:	079d      	lsls	r5, r3, #30
 80058a2:	4606      	mov	r6, r0
 80058a4:	460c      	mov	r4, r1
 80058a6:	d507      	bpl.n	80058b8 <__smakebuf_r+0x1c>
 80058a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	2301      	movs	r3, #1
 80058b2:	6163      	str	r3, [r4, #20]
 80058b4:	b002      	add	sp, #8
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	ab01      	add	r3, sp, #4
 80058ba:	466a      	mov	r2, sp
 80058bc:	f7ff ffc8 	bl	8005850 <__swhatbuf_r>
 80058c0:	9900      	ldr	r1, [sp, #0]
 80058c2:	4605      	mov	r5, r0
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7fe ffbf 	bl	8004848 <_malloc_r>
 80058ca:	b948      	cbnz	r0, 80058e0 <__smakebuf_r+0x44>
 80058cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d0:	059a      	lsls	r2, r3, #22
 80058d2:	d4ef      	bmi.n	80058b4 <__smakebuf_r+0x18>
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	f043 0302 	orr.w	r3, r3, #2
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	e7e3      	b.n	80058a8 <__smakebuf_r+0xc>
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <__smakebuf_r+0x7c>)
 80058e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	6020      	str	r0, [r4, #0]
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	9b00      	ldr	r3, [sp, #0]
 80058f0:	6163      	str	r3, [r4, #20]
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	6120      	str	r0, [r4, #16]
 80058f6:	b15b      	cbz	r3, 8005910 <__smakebuf_r+0x74>
 80058f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058fc:	4630      	mov	r0, r6
 80058fe:	f000 f889 	bl	8005a14 <_isatty_r>
 8005902:	b128      	cbz	r0, 8005910 <__smakebuf_r+0x74>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	89a0      	ldrh	r0, [r4, #12]
 8005912:	4305      	orrs	r5, r0
 8005914:	81a5      	strh	r5, [r4, #12]
 8005916:	e7cd      	b.n	80058b4 <__smakebuf_r+0x18>
 8005918:	08004a09 	.word	0x08004a09

0800591c <memcpy>:
 800591c:	440a      	add	r2, r1
 800591e:	4291      	cmp	r1, r2
 8005920:	f100 33ff 	add.w	r3, r0, #4294967295
 8005924:	d100      	bne.n	8005928 <memcpy+0xc>
 8005926:	4770      	bx	lr
 8005928:	b510      	push	{r4, lr}
 800592a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005932:	4291      	cmp	r1, r2
 8005934:	d1f9      	bne.n	800592a <memcpy+0xe>
 8005936:	bd10      	pop	{r4, pc}

08005938 <memmove>:
 8005938:	4288      	cmp	r0, r1
 800593a:	b510      	push	{r4, lr}
 800593c:	eb01 0402 	add.w	r4, r1, r2
 8005940:	d902      	bls.n	8005948 <memmove+0x10>
 8005942:	4284      	cmp	r4, r0
 8005944:	4623      	mov	r3, r4
 8005946:	d807      	bhi.n	8005958 <memmove+0x20>
 8005948:	1e43      	subs	r3, r0, #1
 800594a:	42a1      	cmp	r1, r4
 800594c:	d008      	beq.n	8005960 <memmove+0x28>
 800594e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005956:	e7f8      	b.n	800594a <memmove+0x12>
 8005958:	4402      	add	r2, r0
 800595a:	4601      	mov	r1, r0
 800595c:	428a      	cmp	r2, r1
 800595e:	d100      	bne.n	8005962 <memmove+0x2a>
 8005960:	bd10      	pop	{r4, pc}
 8005962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800596a:	e7f7      	b.n	800595c <memmove+0x24>

0800596c <_realloc_r>:
 800596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005970:	4680      	mov	r8, r0
 8005972:	4614      	mov	r4, r2
 8005974:	460e      	mov	r6, r1
 8005976:	b921      	cbnz	r1, 8005982 <_realloc_r+0x16>
 8005978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597c:	4611      	mov	r1, r2
 800597e:	f7fe bf63 	b.w	8004848 <_malloc_r>
 8005982:	b92a      	cbnz	r2, 8005990 <_realloc_r+0x24>
 8005984:	f7fe fef4 	bl	8004770 <_free_r>
 8005988:	4625      	mov	r5, r4
 800598a:	4628      	mov	r0, r5
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005990:	f000 f850 	bl	8005a34 <_malloc_usable_size_r>
 8005994:	4284      	cmp	r4, r0
 8005996:	4607      	mov	r7, r0
 8005998:	d802      	bhi.n	80059a0 <_realloc_r+0x34>
 800599a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800599e:	d812      	bhi.n	80059c6 <_realloc_r+0x5a>
 80059a0:	4621      	mov	r1, r4
 80059a2:	4640      	mov	r0, r8
 80059a4:	f7fe ff50 	bl	8004848 <_malloc_r>
 80059a8:	4605      	mov	r5, r0
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d0ed      	beq.n	800598a <_realloc_r+0x1e>
 80059ae:	42bc      	cmp	r4, r7
 80059b0:	4622      	mov	r2, r4
 80059b2:	4631      	mov	r1, r6
 80059b4:	bf28      	it	cs
 80059b6:	463a      	movcs	r2, r7
 80059b8:	f7ff ffb0 	bl	800591c <memcpy>
 80059bc:	4631      	mov	r1, r6
 80059be:	4640      	mov	r0, r8
 80059c0:	f7fe fed6 	bl	8004770 <_free_r>
 80059c4:	e7e1      	b.n	800598a <_realloc_r+0x1e>
 80059c6:	4635      	mov	r5, r6
 80059c8:	e7df      	b.n	800598a <_realloc_r+0x1e>
	...

080059cc <_read_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4d07      	ldr	r5, [pc, #28]	; (80059ec <_read_r+0x20>)
 80059d0:	4604      	mov	r4, r0
 80059d2:	4608      	mov	r0, r1
 80059d4:	4611      	mov	r1, r2
 80059d6:	2200      	movs	r2, #0
 80059d8:	602a      	str	r2, [r5, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	f7fb fabe 	bl	8000f5c <_read>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_read_r+0x1e>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_read_r+0x1e>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	200001d4 	.word	0x200001d4

080059f0 <_fstat_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d07      	ldr	r5, [pc, #28]	; (8005a10 <_fstat_r+0x20>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	4611      	mov	r1, r2
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	f7fb fad6 	bl	8000fae <_fstat>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	d102      	bne.n	8005a0c <_fstat_r+0x1c>
 8005a06:	682b      	ldr	r3, [r5, #0]
 8005a08:	b103      	cbz	r3, 8005a0c <_fstat_r+0x1c>
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	bd38      	pop	{r3, r4, r5, pc}
 8005a0e:	bf00      	nop
 8005a10:	200001d4 	.word	0x200001d4

08005a14 <_isatty_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d06      	ldr	r5, [pc, #24]	; (8005a30 <_isatty_r+0x1c>)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fb fad5 	bl	8000fce <_isatty>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_isatty_r+0x1a>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_isatty_r+0x1a>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	200001d4 	.word	0x200001d4

08005a34 <_malloc_usable_size_r>:
 8005a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a38:	1f18      	subs	r0, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bfbc      	itt	lt
 8005a3e:	580b      	ldrlt	r3, [r1, r0]
 8005a40:	18c0      	addlt	r0, r0, r3
 8005a42:	4770      	bx	lr

08005a44 <_init>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr

08005a50 <_fini>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr
